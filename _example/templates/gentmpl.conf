# gentmpl configuration file (TOML)

# Package name to use in the generated code. (default "templates")
# package_name = "templates"

# Do not cache the templates. 
# A new template will be created on every page.Execute.
# Usefull for debug purposes.
# Ignored if asset_manager is used.
#no_cache = false

# Do not format the generated code with go/format.
# Usefull for debug purposes.
#no_go_format = false

# Asset manager to use. Possible values:
# - none (default)
# - embed 
asset_manager = "embed"

# Use text/template instead of html/template.
#text_template = false

# PageEnumType type name used in the generated package. (default "PageEnum")
#page_enum_type = ""

# Strings used as prefix and suffix in the PageEnum constants.
#   Defaults:
#     page_enum_prefix = "Page"
#     page_enum_suffix = ""
#   Example:
#     page "CreateUser", prefix="Page", suffix="" -> PageCreateUser
#page_enum_prefix = "Page"
#page_enum_suffix = ""

# Name of the variable used as funcMap.
# The variable must be defined in another file of the same package
# (ex: "templates/func-map.go").
# If not defined or blank, no funcMap will be used
func_map = "funcMap"

# Base dir of the templates files
template_base_dir = "tmpl"

# Templates used to render the Pages.
# Each template must have name and an array of string item.
# Each string item can be a:
#   - path of a file to load in the template creation. The file path is
#     relative to the template_base_dir folder.
#   - name of another template to include in the current template.
#
# Example templates contents:
#    "flat/header.tmpl"         : "{{define "header"}}<html><head></head><body>{{end}}"
#    "flat/footer.tmpl"         : "{{define "footer"}}</body></html>{{end}}"
#    "flat/page1.tmpl"          : "{{define "page-1"}}{{template "header"}}Page 1{{template "footer"}}{{end}}"
#    "flat/page2and3.tmpl"      : "{{define "page-2"}}{{template "header"}}Page 2{{template "footer"}}{{end}}{{define "page-3"}}{{template "header"}}Page 3{{template "footer"}}{{end}}"
#    "inheritance/base.tmpl"    : "<html><head></head><body>{{template "content" .}}</body></html>"
#    "inheritance/content1.tmpl": "{{define "content"}}content 1{{end}}"
#    "inheritance/content2.tmpl": "{{define "content"}}content 2{{end}}"

[templates]
flat = ["flat/footer.tmpl", "flat/header.tmpl", "flat/page1.tmpl", "flat/page2and3.tmpl"]
inh1 = ["inhbase", "inheritance/content1.tmpl"]
inh2 = ["inhbase", "inheritance/content2.tmpl"]
inhbase = ["inheritance/base.tmpl"]

# Pages to render.
# Each page must have name, a template name and optionally a base name.
# If defined, the base will be used in template.ExecuteTemplate as the name
# of the template. Otherwise will be called template.Execute.
[pages]
Inh1 = {template="inh1"}
Inh2 = {template="inh2"}
Pag1 = {template="flat", base="page-1"}
Pag2 = {template="flat", base="page-2"}
Pag3 = {template="flat", base="page-3"}

