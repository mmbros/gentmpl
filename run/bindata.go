// Code generated by go-bindata.
// sources:
// context.tmpl
// DO NOT EDIT!

package run

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\xdf\x6f\xe3\x36\xf2\x7f\x96\xfe\x8a\xa9\x12\xa0\x56\x6a\xcb\x69\xf0\xed\xf7\x21\x7b\x3e\x60\xb7\xbb\x5b\xe4\xd0\xdd\x0d\xb0\x29\xee\x21\x30\x52\xda\xa2\x1c\xb6\x12\xa9\x92\xd4\x26\x81\xe1\xff\xfd\x30\x43\x4a\xa2\x64\x3b\x9b\x3d\xa0\x38\x3f\x59\x22\x67\x38\xf3\x99\x9f\x1c\x6d\xb7\x90\xf3\x42\x48\x0e\x49\xcd\xd6\x7f\xb2\x0d\x4f\x60\xb7\x8b\xb7\xdb\x19\x58\x5e\xd5\x25\xb3\x1c\x92\x7b\xce\x72\xae\x13\xc8\xdc\x52\xb0\x42\xb4\xc2\x0a\x25\xcd\xa1\xe5\x7b\x5e\xd6\x5c\x1f\x5c\x2a\x1a\xb9\x9e\xd5\x6c\xc3\x67\x85\x28\x79\xb0\x45\x14\x90\x7d\x54\x3f\xb3\xf5\x3d\xc7\x37\xd1\x11\xaa\xf6\xdd\x4c\xaa\x35\xee\xed\x19\xf0\xd2\x1c\xa3\x44\x59\xfd\xc6\xaf\xf1\x0d\xf8\xc9\xfc\x19\xe9\x57\xcc\xf0\xe7\xf5\xe3\x8f\x7c\xdd\xd8\xe3\x9b\x2a\x26\xe4\xde\x69\x71\x1c\x07\xa6\x69\x0d\xb0\xdb\xc5\xf3\x39\xfc\xc2\x25\xd7\xcc\xf2\x1c\x56\x4f\xb0\xdd\x42\x76\xad\xd5\x46\xb3\xea\x23\xab\x50\xf1\x57\x70\x76\x76\x06\x6f\x3f\xc1\xc7\x4f\x37\xf0\xee\xed\xd5\x0d\x3e\x23\xdd\xcf\x9a\x23\xd5\x25\xd1\xdc\x88\x8a\x1b\xcb\xaa\x3a\x7b\xaf\x74\xc5\x2c\x24\x17\xe7\xe7\xff\x3f\x3b\xff\x71\x76\x7e\x01\x3f\xfe\x74\x79\xfe\x7f\x97\xe7\x3f\xb5\x27\x5e\x33\xcd\x2a\x73\x09\x52\xdd\x11\xd8\x0b\xe4\xd0\x1b\x69\x8a\x0b\x1b\x75\x57\x10\x27\xbf\xf8\x8b\xf2\x8c\x71\x9d\x19\xc3\xed\x5d\xc5\x24\xdb\x70\xbd\x48\x70\xc7\x6b\x7c\xf5\xc1\xbd\x81\xdd\x2e\x99\x02\xa2\x71\x57\xb1\xda\xad\xbf\x6f\xe4\xfa\x03\xab\x71\x29\x8e\xbd\x6f\x3a\x6d\xdd\x7f\xaf\x6d\x1c\x8b\xaa\x56\xda\xc2\xa4\x75\x9e\x1b\xfe\x68\x6f\x5a\x88\x67\x68\xea\xc4\xf2\x47\x3b\xef\x2c\x4b\xde\x4d\x5e\xe2\x56\xef\x6d\x55\x8e\x57\x9d\x15\xa2\x44\xa8\x24\x8e\x92\x9a\xd9\xfb\x39\xfa\x29\xfe\x49\xe2\x74\x60\xa8\xc0\x4e\x83\x70\x40\xfa\xf9\x1c\xec\x53\xcd\x21\x58\x88\x23\x7a\x33\x89\xa3\x88\xec\xe0\xcf\x7d\x27\x9b\xea\x06\x17\x76\x3b\xd4\xb2\x11\xd2\xc2\xa4\xe4\xb2\xdf\x61\x52\x62\x19\x39\x0c\x36\xcf\x50\xe0\xaa\xdf\x9d\x92\x0c\x87\x48\xd6\x4a\x1a\xcb\xa4\x35\x71\x44\x7f\x3b\xb7\x34\xbf\x72\x09\x0b\xa4\x19\x1e\x4f\xfc\xdc\x56\x2f\xbc\x66\x72\xc3\xe1\x54\xe4\x8f\x53\x38\xe5\x25\xaf\xe0\x72\xe1\x4f\x77\xd0\xd2\xae\x53\x7a\x43\xe6\x72\x9b\x76\x3b\x67\x29\xfe\x17\xd1\xc2\xb9\xd7\xe0\x74\x4f\xc6\x05\x08\x65\x59\x0f\x36\xf1\xc3\xff\x33\xaf\x9b\x63\x24\x95\x1d\xe6\x8c\xf9\x1c\x2a\x95\x37\x25\x87\x2f\x4c\x0b\xb6\x2a\xb9\x89\xa3\x2f\x4c\x43\xd5\x6b\x73\x1b\xea\xbb\x3c\x6b\x9f\x3a\x7d\xe3\x68\x10\xfb\x47\xe2\xd2\xe7\xb7\x3e\x75\x85\x6e\x9d\x5d\x99\x8f\x4a\x3a\x37\x43\xe7\x06\x4a\x75\x17\xe8\x44\x66\x42\xff\xe1\x76\x69\xac\x16\x72\x93\x76\xff\x60\xbb\x67\x90\xf7\xaa\xcc\xb9\x86\x05\x24\xa1\xc7\xbc\x61\x86\xbf\x15\x14\x3b\x4e\x39\xe4\x0b\x8e\x49\x1c\xd1\x21\x68\x8f\x8a\xfd\xc9\x27\x2d\xf3\x29\xda\xd4\x1d\x9d\xa6\x71\x54\x28\x0d\x62\x4a\x62\xe1\x56\x67\x4f\x27\xd8\x36\x8e\x22\xf3\x20\xec\xfa\x9e\xfe\xae\x99\xe1\x1d\x6d\x0a\x8b\x05\x9c\x3b\xba\xdb\xf3\x25\x3e\x7d\x9f\x7d\x3f\x78\x6e\x83\x25\xfb\xcc\x6b\xa6\x99\x55\xfa\x12\xdd\x81\x44\x74\xab\x71\x14\xe5\xbc\x60\x4d\x69\xc7\x2b\x44\xf7\x2f\x25\xe4\x64\x84\x80\x3b\x21\x8d\xa3\x08\x5d\x81\x34\xbc\x15\x4b\x58\x90\xe6\x31\xbe\xd4\xdc\x36\x5a\xd2\xb3\x89\x77\x61\x28\x63\x1a\x7b\x4f\x9a\xb9\x3d\x06\xec\x7d\xab\x6b\x63\x5c\x2e\xc5\x37\xbf\xdb\xdf\x3b\xe0\x9d\xd1\x26\x16\x8e\x04\x6a\xea\x38\x4e\x86\xc6\x43\x53\x60\x80\xcc\xe7\x9e\xbd\x93\x26\x8a\xdc\xd3\x02\x6e\xb3\x2c\xf3\xfb\xb7\xc8\x9a\x19\xab\x2f\x8c\xd5\x90\x39\x01\x77\x3b\x80\x9d\x63\xd0\x55\x39\x21\x73\xfe\x08\x56\x01\xd3\x9a\x3d\x81\x2a\x88\xb7\x7b\x1d\x47\x91\x15\x17\xac\x10\x2d\xef\xdb\xe5\x30\x1f\x10\x5b\xcc\x07\xdb\x03\x71\xcb\x70\x1f\xc6\xed\xcd\xd5\xc5\xeb\xf7\x57\x5d\xe0\xc2\x76\x8b\x4b\x24\x18\x6d\xda\xed\x60\x37\x05\x97\x4d\x9c\x38\xa7\x41\x72\xa0\x48\xde\x0b\xd1\xa8\x4b\x41\x1b\x6e\x09\xdf\xae\xf8\x39\x34\x88\x11\x46\xa7\xc8\x1f\xc9\x5d\x9d\x26\xb7\x76\x49\x54\xab\x46\x94\x39\xd1\x0d\xf4\x36\x71\x84\xa0\x1d\x71\x6f\x64\xd5\x7a\xf7\x1f\x53\x40\xc1\x3a\xe7\xa6\x63\x10\x06\xa4\xbf\xfd\x63\xe9\x5d\xce\xdc\x8a\xfc\x71\x19\xba\x10\xae\xc7\xa3\xc8\x0f\x43\x7f\xaf\x7f\x71\x95\xf2\x25\x2e\xd6\x41\xa0\x0a\x7a\x46\x2e\xde\xd5\xea\xbe\xc8\x6d\xbe\xee\x69\xe8\x61\x5a\x55\xc4\x00\x7d\xa3\x63\xdc\xa1\x4a\x69\xe1\xc2\xb6\x8e\x71\xc4\x8f\xb7\x98\xeb\x66\xd0\x99\x3b\xbb\xbe\xba\xb8\xf1\x9e\xb0\x3b\x6c\xbd\x50\xf4\x88\xfc\xa7\xbe\xb0\xb7\xf8\xb8\xec\x20\xb4\x99\x17\x7a\x84\xe3\x41\x14\xfb\xbe\xcb\x01\xd9\x55\xf0\x10\xcb\xbd\x24\xfd\x4d\x10\xb6\x44\x93\x14\xf6\xd3\x7d\x1b\xb9\xe8\x2d\x5f\x43\x0b\x0e\xfc\x9e\x03\xd0\xe3\xd1\x17\x1f\xf4\x36\x07\xd6\xf2\x5b\xb0\xe9\x7b\xdd\xff\x19\x46\xce\x9b\xd1\xdc\x6c\xc3\x3b\xfb\x1e\xae\x7d\xbf\xa8\x37\x42\xe6\xcc\x32\x57\x1e\xe7\x67\x18\xb5\x41\x1f\x88\x75\x62\xa3\x66\x2b\xb7\x29\x3e\x9b\x3b\xad\x1a\xc3\x83\xd7\xf0\xa1\x31\x96\x18\x53\x7f\x88\x6e\x5e\x2a\x96\xf7\xc5\x31\xb6\x55\x5d\x52\xe6\x68\xc5\xfd\xc8\x1f\x26\x5d\x1d\xc1\x2a\xe9\x0a\xde\xed\xf9\x32\x4d\xbd\xa4\x7d\x73\x49\x7f\xcd\x64\xd8\x71\xa6\xbd\x49\x30\x89\xdc\x4d\x5d\x6d\xdd\x2f\x91\x78\x76\x76\xcd\xb4\xe1\x13\x17\x96\x93\x4e\xdc\x09\x92\xa4\x29\x3a\x7f\x1b\x0f\x55\x5d\x86\x17\x94\x23\x90\x48\x25\xb9\x03\xa3\xa5\x6b\x15\x43\xde\xae\xf5\x9a\x0d\xb4\x70\xa9\xf6\x45\xfa\x1f\x56\xd7\xa9\xe0\xac\xb9\xd7\xa3\xa4\x59\x96\xa5\xfe\xd4\xbe\x6b\xee\x8f\x7b\x31\x6d\xdf\xb7\xf5\xf0\xbe\xc0\xfb\xdd\x0d\xcb\xf9\x06\x6a\x73\xd0\xdb\x41\x62\x7f\xf9\x2d\x9e\x4e\xc0\xa4\x30\xac\xdb\x78\xd6\x81\x12\xdd\x57\xe8\x37\xb4\x01\x4b\x61\xdb\x7c\xf2\xbf\x7c\x95\xa5\xa5\xb4\x6d\xc1\xaf\x2e\xde\x5c\x75\x0d\xfb\xfc\x0c\x38\x5b\xdf\xbb\x44\x7d\xcf\x0c\x30\xc8\x45\x51\x70\xcd\xa5\xa5\x33\x81\xec\xdd\x26\x0a\x92\xa2\x4d\xa6\xe1\x8d\xd6\xb1\x32\xaa\x72\x3a\x1a\xb8\x67\x5f\x38\xa9\x6c\x50\x7d\xe2\x34\xfb\x27\x68\x5e\xb1\x1a\x24\xe7\x79\xcb\x98\xea\x80\xb8\x58\x89\x30\xb7\x8d\x20\x19\x54\x7c\xa7\x80\xd3\x73\x28\x15\x72\x69\x73\x57\xf4\x4d\x86\xec\x2e\xc2\xce\x96\xef\xdc\x23\xb0\xba\x2e\x05\x47\x4c\x6a\xf4\xa4\xdc\x97\xb3\xd6\xb0\x58\xd7\x50\xc1\x9a\xaf\x45\x21\x78\x0e\x94\x15\xd4\xea\x0f\xbe\xb6\x53\xe4\xf3\xa0\x85\x45\x13\xe2\x2e\xd5\xd8\xba\xb1\x48\xf3\xa0\x33\x5c\xbc\x2a\x80\x49\xe0\x5a\x2b\x0d\x6a\xbd\x6e\xb4\x01\x27\x46\x4b\xd1\x57\x34\xdd\x71\x12\xd6\x78\x4e\xd3\x76\xb7\x92\xc8\xcd\x58\x55\x9b\x29\xac\x1a\x8b\xb2\x5a\xc1\x4a\xd0\xdc\x34\xa5\x35\x50\xb1\x27\x60\xa5\xe6\x2c\x7f\x72\x56\x59\x71\x2e\x89\xa3\xe5\xb2\x55\xc2\x8b\x87\x6f\xb9\x93\xef\x75\x2f\x00\x72\x58\x71\x7f\x20\xcf\xc1\xb0\x82\x97\x4f\x20\xb0\x9d\xd5\xac\x2c\x79\x99\x7d\xd5\xa9\x3d\xa6\x93\x07\x0d\x42\x65\xff\xa6\x73\xa6\x0e\x31\x21\x2d\xd7\x05\x5b\xf3\xed\x2e\xf5\x80\xf8\x04\xd6\xa5\xf3\x3e\xf9\xc7\x11\xc5\x53\xbb\xe0\x62\x25\x8e\xf0\xae\x85\xef\xbf\x5b\x40\x92\x50\x1b\x15\xa4\xb6\xcc\x1f\xde\x71\x79\xd0\x53\xda\xee\x04\x48\xc3\x52\x18\xee\xa7\x7d\x6e\xc7\xc0\x89\xc6\x3e\xe4\xe6\x24\xe8\x3b\x67\x0e\x07\x7c\x31\x49\xb7\xed\xe5\x87\x30\x19\x40\x42\x37\xc8\x16\x27\xba\x80\x4e\x5c\xe3\xea\xef\xa8\xe7\x2e\x40\x1f\xa8\x91\x54\x26\xfb\x6c\x73\xd5\xd8\x98\xf4\xe4\x5a\x77\xea\x87\x82\x4a\x51\xa6\xaf\x68\xf5\xbb\x05\x3e\x10\x0a\x45\x65\xb3\x6b\x2d\xa4\x9d\x70\xad\x49\xd1\x5d\x7c\x36\x3f\x16\x11\x56\x55\x25\x2a\x72\x02\x1b\x2e\xc9\x00\x6b\x25\x0b\xb1\x69\x34\x43\x47\x73\xd7\xb1\xc9\xcd\xa7\x0f\xbf\xa6\x71\x7c\x02\x7e\xde\xe1\x90\xb7\x8a\xea\xa3\x90\xe4\x4f\x9b\x6e\x12\xb4\x56\x39\xcf\x60\xe2\x6f\x54\x90\x74\xe5\x31\xe9\xaa\x73\x38\x37\xc1\x3c\xec\x67\x2a\x77\xc4\xd7\xdf\x2d\x87\xb3\x95\xd1\xa4\xe4\x64\x4c\x31\x98\x95\xc4\x27\xf0\x56\xd1\x55\x9c\x7a\x94\x41\x70\x99\x2c\x3e\x81\xd7\x20\xf9\x43\xef\xee\x0f\xa2\x2c\xd1\xdf\xd7\x6e\x2a\x05\x4a\x02\xff\xc2\xf5\xd3\x00\x72\xa4\xfb\xcd\xf0\xa2\x29\x4b\xc0\x4a\x9c\xf3\x55\xb3\x81\xba\xd1\xb5\x32\xc8\x75\x34\x2f\x44\x29\xdb\x19\x15\x2c\xc0\xea\x86\x8f\x54\x08\x56\x0b\x56\x1a\x7e\x58\x03\x37\xc8\x3a\x00\x31\x3c\x08\x7b\x0f\x1b\x35\x77\x3b\x5e\x2c\x5e\x37\x0c\xf3\x12\x76\xc3\xb2\xa3\x52\x86\x3b\x0e\x49\xea\x5a\xa2\xb6\x6d\x70\x6e\x91\xc1\xb5\x32\x46\xac\x68\xee\x51\x36\xdc\x5c\xc6\x27\x30\xa3\x86\xa2\x73\x8d\x94\x5e\x05\x6d\x57\x30\x42\x39\x36\xbb\x18\xb5\x28\x70\x70\x7e\x37\x52\x61\x8f\x66\xec\x2c\xbf\x19\xf4\x8f\x60\x2e\x07\x42\x1a\xcb\x59\x8e\x55\x7c\x30\x92\xcb\x8e\x4e\xf6\x90\xfe\xae\xa3\x3f\x08\xe5\x78\xcb\x21\x2c\x07\x69\x94\xa6\x73\xe4\xe1\x74\x67\xdb\x8b\x34\x1f\x04\x61\xb0\xb5\xf4\x61\xac\x05\x1c\x5d\xb0\x6d\xf8\x1d\x97\x4d\x75\x47\xfc\xbb\x70\x1b\xe4\xef\xfd\x78\x1b\x13\x8d\x41\xfc\x4c\x2d\x8a\xbf\x5e\x32\x03\xb5\xe6\x85\x78\x04\x26\x73\x30\x4d\x81\x7f\xbd\xfc\xed\x49\xfd\xd8\x0f\x7d\x17\xe0\xad\xd3\x81\x3c\x05\x7f\xfd\x91\x9e\xd5\xc2\xa9\x97\xec\xad\x7b\xfe\x24\x14\xae\xbd\x7b\x64\x55\x5d\xf2\x90\x11\x24\x6e\xe4\xfc\x9b\xe1\x3a\x99\x7a\xe1\x16\x8e\xdf\xd4\x0b\xb8\x48\x12\x6c\x59\xf0\x5d\xbf\x79\x0c\xe3\xb5\x93\x65\x08\x64\x2f\x60\x08\xa5\xdf\xfa\x1c\x98\x63\xcd\x02\x48\x47\xe7\x7e\x76\x3a\x0e\xcf\xed\x15\x0f\xcf\xf5\x5b\x9f\x3b\x37\x44\x6c\x68\xc6\x8f\x41\xf3\xda\x4e\x2c\x3b\x9b\x16\xae\x4f\x47\x7b\xdd\x84\xeb\x55\x63\x2c\x26\x50\x57\x56\xc8\x53\x99\x54\xf6\x9e\x6b\x57\x41\x3c\x3f\xea\x0c\xbd\xd3\xc6\x27\x30\xe1\x8f\x97\x41\x79\x98\xfb\xd2\x5a\x67\x1b\x95\xa4\x78\xc6\x95\x4b\x06\x2d\x57\xa5\x61\x55\x32\xf9\xe7\x14\xa4\x6a\x45\xe9\x72\x37\x8a\x18\x8f\xae\x54\xed\xb0\xf3\x0e\x7b\xd0\x05\x24\xed\xc2\x18\x97\x70\xcf\x18\x0f\x6a\xf3\x73\xa1\x5b\x1d\x3a\x71\xfd\xf4\xa7\x7d\xbe\xc3\x9e\xf4\x0e\x37\x3e\x33\x1b\x45\xdc\x3a\x7a\x02\xd5\x2a\xd0\x5c\xe6\x98\x37\x7d\x68\x50\x34\xbc\xc3\x16\xbd\x6f\xc7\x10\x5e\xea\xe4\x28\x19\x60\x48\x31\xd9\x8f\xa1\xfc\xbd\x41\x58\x5e\x75\xb4\xc1\x3b\x58\x33\x89\x08\x31\x17\x0f\x33\x77\x81\x54\x05\x30\x67\x9c\xf6\x1a\xeb\xc3\xb3\x3b\x95\xaa\xa1\x50\x32\x23\x5b\xd3\x56\xa2\x14\xc6\xc7\x95\xe6\x25\xb3\xe2\x4b\xd7\x17\xef\x43\x51\xd0\xac\x34\xf3\xe7\xb6\xf7\xa2\xd6\x35\xc2\xbe\x5a\xc8\x75\xd9\xe4\x5d\x37\xb1\x6e\x34\x5d\x48\xfa\xbc\xdb\xcf\xc8\x97\x64\x21\x3f\x38\x74\x4d\xdd\x69\x37\x0b\x18\x7e\x23\xd8\x6e\xdd\x0e\x37\xc0\xbf\x0d\x07\x9c\x9e\x64\xb7\x5b\x1e\xc8\xc0\xa6\xb7\x4b\x87\x28\x65\x91\xa1\x25\xa6\xc0\x46\xb7\x3e\x34\x8d\xaa\x11\x35\x56\x96\x4f\xc0\xdc\x3d\x08\x97\xbc\x3f\x7b\x5f\x9e\x92\x96\xb4\x18\x3a\x30\xa9\xdf\xaa\x3c\xea\x61\x31\xfe\x90\x08\x99\xc5\x27\x63\x77\xcc\xe0\x13\x62\xfa\x20\x02\x8e\x6b\xec\xd4\xf3\x3d\x86\x59\x4c\x77\xa6\x83\x38\x92\x92\xfd\x97\x93\x3d\x08\xb7\x2d\xb3\x45\xb2\xdd\x9e\x0e\x3a\xf5\x36\xdd\x88\xc2\xb1\xa1\x4e\x9d\xbe\xb8\xa1\x9a\xf4\x21\x6d\xf0\x3e\x09\x86\xb3\xc3\xf1\xf8\xb1\x4f\x1c\xc1\x77\xd3\xf6\x2b\x06\x3e\x51\xdf\x3d\x9f\xd3\x7f\x07\x69\x3f\x90\xa1\xc1\x2b\xcd\x04\x8f\x4c\xd0\x26\xe7\xe9\x2b\xb0\xff\x08\x3f\xc0\xbc\x02\xfb\xc3\x0f\xae\x97\x6e\xbd\xca\x06\xe3\xa5\xd9\xf3\xf3\xa5\x99\x9f\xa6\xcc\x9e\x9f\x30\xcd\xdc\x65\x38\xfa\x2f\x86\x4c\x51\xf4\xf7\x8e\x99\xa2\xe8\xf9\x41\x53\xf4\xa2\x51\x93\xfb\x30\x12\xcc\x19\xed\x12\xbb\x22\x37\x77\x0a\x92\xef\x31\xac\x68\xf4\xd4\xa2\xb4\xc7\x66\x3c\x86\x3a\x32\x87\xfa\xdb\x07\x51\xe3\x49\xd4\xb7\x8d\xa2\x86\xb3\xa8\x28\x1d\x7c\xef\x1d\xcf\x31\xfe\x13\x00\x00\xff\xff\x59\x3e\xd1\x3e\x1f\x21\x00\x00")

func contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_contextTmpl,
		"context.tmpl",
	)
}

func contextTmpl() (*asset, error) {
	bytes, err := contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.tmpl": contextTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"context.tmpl": &bintree{contextTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

