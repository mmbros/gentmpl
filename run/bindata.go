// Code generated by go-bindata.
// sources:
// context.tmpl
// DO NOT EDIT!

package run

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\xdf\x6f\xe3\x36\xf2\x7f\x96\xfe\x8a\xa9\x12\xa0\x56\x6a\xcb\x69\xf0\xed\xf7\x21\x7b\x3e\x60\xb7\xbb\x5b\xe4\xd0\xdd\x0d\xb0\x29\xee\x21\x30\x52\xda\xa2\x1c\xb6\x92\xa8\x92\xd4\x26\x81\xe1\xff\xfd\x30\x43\x52\xa2\x64\x3b\x9b\x3d\xa0\xb8\x3c\x04\x92\xc8\x19\xce\x7c\xe6\x27\xc7\xdb\x2d\xe4\xbc\x10\x35\x87\xa4\x61\xeb\x3f\xd9\x86\x27\xb0\xdb\xc5\xdb\xed\x0c\x0c\xaf\x9a\x92\x19\x0e\xc9\x3d\x67\x39\x57\x09\x64\x76\x29\x58\x21\x5a\x61\x84\xac\xf5\xa1\xe5\x7b\x5e\x36\x5c\x1d\x5c\x2a\xda\x7a\x3d\x6b\xd8\x86\xcf\x0a\x51\xf2\x60\x8b\x28\x20\xfb\x28\x7f\x66\xeb\x7b\x8e\x5f\xa2\x23\x54\xfe\xdb\xac\x96\x6b\xdc\xdb\x33\xe0\xa5\x3e\x46\x89\xb2\xba\x8d\x5f\xe3\x1b\xf0\xab\xf3\x67\xa4\x5f\x31\xcd\x9f\xd7\x8f\x3f\xf2\x75\x6b\x8e\x6f\xaa\x98\xa8\xf7\x4e\x8b\xe3\x38\x30\x8d\x37\xc0\x6e\x17\xcf\xe7\xf0\x0b\xaf\xb9\x62\x86\xe7\xb0\x7a\x82\xed\x16\xb2\x6b\x25\x37\x8a\x55\x1f\x59\x85\x8a\xbf\x82\xb3\xb3\x33\x78\xfb\x09\x3e\x7e\xba\x81\x77\x6f\xaf\x6e\xf0\x1d\xe9\x7e\x56\x1c\xa9\x2e\x89\xe6\x46\x54\x5c\x1b\x56\x35\xd9\x7b\xa9\x2a\x66\x20\xb9\x38\x3f\xff\xff\xd9\xf9\x8f\xb3\xf3\x0b\xf8\xf1\xa7\xcb\xf3\xff\xbb\x3c\xff\xc9\x9f\x78\xcd\x14\xab\xf4\x25\xd4\xf2\x8e\xc0\x5e\x20\x87\xde\x48\x53\x5c\xd8\xc8\xbb\x82\x38\xb9\xc5\x5f\xa4\x63\x8c\xeb\x4c\x6b\x6e\xee\x2a\x56\xb3\x0d\x57\x8b\x04\x77\xbc\xc6\x4f\x1f\xec\x17\xd8\xed\x92\x29\x20\x1a\x77\x15\x6b\xec\xfa\xfb\xb6\x5e\x7f\x60\x0d\x2e\xc5\xb1\xf3\x4d\xab\xad\x7d\x76\xda\xc6\xb1\xa8\x1a\xa9\x0c\x4c\xe2\x28\xb9\x37\x55\x39\xef\x2c\x18\x47\x89\x90\xf8\xbf\x61\xe6\x7e\x8e\x6e\x86\x0f\x49\x9c\x0e\x70\x0e\x60\x1e\x78\x33\xfa\xc8\x7c\x0e\xe6\xa9\xe1\x10\x2c\xc4\x11\x7d\x99\xc4\x51\x44\x30\xba\xc3\xde\xd5\x6d\x75\x83\x0b\xbb\x1d\x0a\xd9\x8a\xda\xc0\xa4\xe4\x75\xbf\x43\xa7\xc4\x32\xb2\x2a\x6c\x9e\xa1\xc0\x55\xb7\x3b\x25\x19\x0e\x91\xac\x65\xad\x0d\xab\x8d\x8e\x23\x7a\xec\xbc\x4a\xff\xca\x6b\x58\x20\xcd\xf0\x78\xe2\x67\xb7\x3a\xe1\x15\xab\x37\x1c\x4e\x45\xfe\x38\x85\x53\x5e\xf2\x0a\x2e\x17\xee\x74\x98\x91\xac\xb8\xeb\x94\xbe\x10\xda\x76\xd3\x6e\x67\xa3\x94\xff\x45\xb4\x70\xee\x34\x38\xdd\x93\x71\x01\x42\x1a\xd6\x83\x4d\xfc\xf0\x79\xe6\x74\xb3\x8c\x6a\x69\x86\x21\x3f\x9f\x43\x25\xf3\xb6\xe4\xf0\x85\x29\xc1\x56\x25\xd7\x71\xf4\x85\x29\xa8\x7a\x6d\x6e\x43\x7d\x97\x67\xfe\xad\xd3\x37\x8e\x06\xa1\x7b\x24\xac\x5c\x7a\xea\x32\x0f\x89\xf2\x9b\xe6\xbf\xc8\x37\xa2\xce\x99\x61\x24\x2a\x3a\x26\x50\x9a\xba\x40\x0f\xd2\x13\x7a\x86\xdb\xa5\x36\x4a\xd4\x9b\xb4\x7b\x82\xed\x9e\x35\xde\xcb\x32\xe7\x0a\x16\x90\x84\xee\xf2\x86\x69\xfe\x56\x90\xdf\x5b\xcd\x90\x2f\x58\x26\x71\x44\x87\xa0\x31\x2a\xf6\x27\x9f\x78\xe6\x53\x34\xa8\x3d\x3a\x4d\xe3\xa8\x90\x0a\xc4\x94\xc4\xc2\xad\xd6\x98\x56\xb0\x6d\x1c\x45\xfa\x41\x98\xf5\x3d\x3d\xae\x99\xe6\x1d\x6d\x0a\x8b\x05\x9c\x5b\xba\xdb\xf3\x25\xbe\x7d\x9f\x7d\x3f\x78\xf7\x91\x92\x7d\xe6\x0d\x53\xcc\x48\x75\x89\xbe\x40\x22\xda\xd5\x38\x8a\x72\x5e\xb0\xb6\x34\xe3\x15\xa2\xfb\x97\x14\xf5\x64\x84\x80\x3d\x21\x8d\xa3\x08\xfd\x80\x34\xbc\x15\x4b\x58\x90\xe6\x31\x7e\x54\xdc\xb4\xaa\xa6\x77\x1d\xdb\x12\xe4\xad\x36\x9f\xc3\x7b\xd2\xcc\xee\xd1\x60\xee\xbd\xae\xad\xb6\x79\x10\xbf\xfc\x6e\x7e\xef\x80\xb7\x46\x9b\x18\x38\x12\xa5\xa9\xe5\x38\x19\x1a\x0f\x4d\x81\xd1\x31\x9f\x3b\xf6\x56\x9a\x28\xb2\x6f\x0b\xb8\xcd\xb2\xcc\xed\xdf\x22\x6b\xa6\x8d\xba\xd0\x46\x41\x66\x05\xdc\xed\x00\x76\x96\x41\x57\xa1\x44\x9d\xf3\x47\x30\x12\x98\x52\xec\x09\x64\x41\xbc\xed\xe7\x38\x8a\x8c\xb8\x60\x85\xf0\xbc\x6f\x97\xc3\x64\x40\x6c\x31\x19\x6c\x0f\x04\x2d\xc3\x7d\x18\xb4\x37\x57\x17\xaf\xdf\x5f\x75\x51\x0b\xdb\x2d\x2e\x91\x60\xb4\x69\xb7\x83\xdd\x14\x6c\x2a\xb1\xe2\x9c\x06\x99\x81\xc2\x78\x2f\x3e\xa3\x2e\xff\x6c\xb8\x21\x7c\xbb\xc2\x65\xd1\x20\x46\x18\x9a\x22\x7f\x24\x77\xb5\x9a\xdc\x9a\x25\x51\xad\x5a\x51\xe6\x44\x37\xd0\x5b\xc7\x11\x82\x76\xc4\xbd\x91\x95\xf7\xee\x3f\xa6\x80\x82\x75\xce\x4d\xc7\x20\x0c\x48\x7f\xfb\xc7\xd2\xb9\x9c\xbe\x15\xf9\xe3\x32\x74\x21\x5c\x8f\x47\x61\x1f\xc6\xfd\x5e\xef\x61\xab\xdc\x4b\x5c\xac\x83\x40\x16\xf4\x8e\x5c\x9c\xab\x35\x7d\x81\xda\x7c\xdd\xd3\xd0\xc3\x94\xac\x88\x01\xfa\x46\xc7\xb8\x43\x95\xd2\xc2\x85\xf1\x8e\x71\xc4\x8f\xb7\x98\xe8\x66\xd0\x99\x3b\xbb\xbe\xba\xb8\x71\x9e\xb0\x3b\x6c\xbd\x50\xf4\x88\xfc\xa7\xb9\x30\xb7\xf8\xba\xec\x20\x34\x99\x13\x7a\x84\xe3\x41\x14\xfb\x9e\xc9\x02\xe9\xc5\x1c\x60\xb9\x97\xa1\xbf\x09\x42\x4f\x34\x49\x61\x3f\xd7\xfb\xc8\x45\x6f\xf9\x1a\x5a\x70\xe0\xef\x39\x00\x1d\x1e\x7d\xe5\x41\x6f\xb3\x60\x2d\xbf\x05\x9b\xbe\x4f\xfd\x9f\x61\x64\xbd\x19\xcd\xcd\x36\xbc\xb3\xaf\x6b\xb9\x07\x45\x8f\xea\xe1\xfc\x0c\x23\x35\xe8\xdb\xb0\x36\x6c\xe4\x6c\x65\x37\xc5\x67\x73\xab\x49\xab\x79\xf0\x19\x3e\xb4\xda\x50\x6f\x47\xfd\x1c\xba\x76\x29\x59\xde\x17\xc4\xd8\x54\x4d\x49\xd9\xc2\x8b\xf8\x91\x3f\x4c\xba\xda\x81\x95\xd1\x16\xb9\xdb\xf3\x65\x9a\x3a\xe9\xfa\x66\x90\x1e\xf5\x64\xd8\x21\xa6\x83\x5a\x7f\x48\x1d\xcc\x27\x77\x53\x5b\x66\xf7\xaa\x65\x70\x69\x38\xbe\x2f\x2c\xfd\xa9\x23\x72\x6d\x0d\x6a\x94\x5d\x33\xa5\xf9\xc4\x06\xf8\xa4\x03\x61\x82\x54\x69\x8a\x61\xe4\x23\xab\x6a\xca\xf0\xc4\x23\x40\xd7\xb2\xe6\x16\x62\x4f\xe7\xe1\x42\xde\xb6\x83\x9b\x0d\xb0\xb1\x49\xfb\x45\xa8\x1e\x06\xd1\xaa\x60\xfd\x62\x5f\xe5\x2c\xcb\x52\x77\x2a\x89\x3e\x3a\xee\xc5\xb4\x7d\xfb\xd7\x23\xf8\x82\x38\xb2\xf7\x2c\xeb\x71\xa8\xcd\xc1\xb8\x81\x1a\xdb\xd4\x6f\x89\x19\x02\x26\x85\x61\x07\x80\x67\x1d\x28\xf6\x7d\xad\x7f\x43\x1b\xb0\xa8\xfa\x1e\x96\xff\xe5\xea\x35\x2d\xa5\xbe\x93\xbf\xba\x78\x73\xd5\xf5\xfd\xf3\x33\xe0\x6c\x7d\x6f\x53\xfe\x3d\xd3\xc0\x20\x17\x45\xc1\x15\xaf\x0d\x9d\x09\x64\x6f\x9f\x72\x48\x0a\x9f\x96\xc3\x7b\xad\x65\xa5\x65\x65\x75\xd4\x70\xcf\xbe\x70\x52\x59\xa3\xfa\xc4\x69\xf6\x4f\x50\xbc\x62\x0d\xd4\x9c\xe7\x9e\x31\x55\x14\x71\xb1\x12\x61\x96\x1c\x41\x32\xe8\x1d\xac\x02\x56\xcf\xa1\x54\xc8\xc5\x67\xc1\xe8\x9b\x0c\xd9\x5d\x87\xad\x2d\xdf\xd9\x57\x60\x4d\x53\x0a\x8e\x98\x34\xe8\x49\xb9\x2b\x8c\xde\xb0\x58\x21\x51\xc1\x86\xaf\x45\x21\x78\x0e\x14\xd8\x72\xf5\x07\x5f\x9b\x29\xf2\x79\x50\xc2\xa0\x09\x71\x97\x6c\x4d\xd3\x1a\xa4\x79\x50\x19\x2e\x5e\x15\xc0\x6a\xe0\x4a\x49\x05\x72\xbd\x6e\x95\x06\x2b\x86\xa7\xe8\x6b\xa3\xea\x38\x09\xa3\x1d\xa7\xa9\xdf\x2d\x6b\xe4\xa6\x8d\x6c\xf4\x14\x56\xad\x41\x59\x8d\x60\x25\x28\xae\xdb\xd2\x68\xa8\xd8\x13\xb0\x52\x71\x96\x3f\x59\xab\xac\x38\xaf\x89\xa3\xe1\xb5\x57\xc2\x89\x87\x5f\xb9\x95\xef\x75\x2f\x00\x72\x58\x71\x77\x20\xcf\x41\xb3\x82\x97\x4f\x20\xb0\x31\x56\xac\x2c\x79\x99\x7d\xd5\xa9\x1d\xa6\x93\x07\x05\x42\x66\xff\xa6\x73\xa6\x16\x31\x51\x1b\xae\x0a\xb6\xe6\xdb\x5d\xea\x00\xd9\xda\x04\xd6\x15\x86\xbe\x8c\xc4\x11\xc5\x93\x5f\xb0\xb1\x12\x47\x78\x4f\xc2\xef\xdf\x2d\x20\x49\xa8\x21\x0b\x52\x5b\xe6\x0e\xef\xb8\x3c\xa8\x29\x6d\xb7\x02\xa4\x61\x51\x0d\xf7\xd3\x3e\xbb\x63\xe0\x44\x63\x1f\xb2\xd3\x12\xf4\x9d\x33\x8b\x03\x7e\x98\xa4\x5b\x7f\x8d\x22\x4c\x06\x90\xd0\x45\xd4\xe3\x44\xf7\xd8\x89\x6d\x81\xdd\x55\xf7\xdc\x06\xe8\x03\xb5\xa4\x52\x67\x9f\x4d\x2e\x5b\x13\x93\x9e\x5c\xa9\x4e\xfd\x50\xd0\x5a\x94\xe9\x2b\x5a\xfd\x6e\x81\x2f\x84\x42\x51\x99\xec\x5a\x89\xda\x4c\xb8\x52\xa4\xe8\x2e\x3e\x9b\x1f\x8b\x08\x23\xab\x12\x15\x39\x81\x0d\xaf\xc9\x00\x6b\x59\x17\x62\xd3\x2a\x86\x8e\x66\x2f\x76\x93\x9b\x4f\x1f\x7e\x4d\xe3\xf8\x04\xdc\xd4\xc3\x22\x6f\x24\x55\x5d\x51\x93\x3f\x6d\xba\x79\xd0\x5a\xe6\x3c\x83\x89\xbb\x9b\x41\xd2\x15\xdd\xa4\xab\xf3\xe1\xf4\x04\xf3\xb0\x9b\xac\xdc\x11\x5f\x77\x4b\x1d\x4e\x58\x92\x78\x90\xf3\x4f\xc6\x14\xc9\xe0\xaa\x76\x02\x6f\x25\x5d\xa3\xa9\xdb\x19\x04\x97\xce\xe2\x13\x78\x0d\x35\x7f\xe8\xdd\xfd\x41\x94\x25\xfa\xfb\xda\xce\xa6\x40\xd6\xc0\xbf\x70\xf5\x34\x80\x1c\xe9\x7e\xd3\xbc\x68\xcb\x12\xb0\x40\xe7\x7c\xd5\x6e\xa0\x69\x55\x23\x35\x72\x1d\x4d\x0d\x51\x4a\x3f\xa9\x82\x05\x18\xd5\xf2\x91\x0a\xc1\x6a\xc1\x4a\xcd\x0f\x6b\x60\xc7\x59\x07\x20\x86\x07\x61\xee\x61\x23\xe7\x76\xc7\x8b\xc5\xeb\x46\x62\x4e\xc2\x6e\x64\x76\x54\xca\x70\xc7\x21\x49\x6d\xa3\xe5\xdb\x06\xeb\x16\x19\x5c\x4b\xad\xc5\x8a\xc6\x27\x65\xcb\xf5\x65\x7c\x02\x33\x6a\x28\x3a\xd7\x48\xe9\x53\xd0\xcc\x39\x19\x07\x43\x39\x14\x62\xd4\x97\xc0\xc1\xd1\xdd\x48\xee\x3d\x9a\xb1\x87\x0c\x12\x16\x8d\xd3\xc8\x97\xe8\x9e\xb5\xe7\xd3\xce\xdd\x42\xb7\xf6\xf4\xa1\x57\x07\x1c\xad\x5b\x6f\xf8\x1d\xaf\xdb\xea\x8e\xf8\x77\x8e\x3d\xc8\x94\xfb\x9e\x3d\x26\x1a\x4b\xfe\x99\x9a\x01\x77\x25\x64\x1a\x1a\xc5\x0b\xf1\x08\xac\xce\x41\xb7\x05\x3e\x3a\xf9\xfd\x49\xfd\x9c\x0e\xbd\x04\xe0\xad\xd5\x81\x6c\x82\x7f\xfd\x91\x8e\xd5\xc2\xaa\x97\xec\xad\x3b\xfe\x24\x14\xae\xbd\x7b\x64\x55\x53\xf2\x90\x11\x24\x76\xc4\xfb\x9b\xe6\x2a\x99\x3a\xe1\x16\x96\xdf\xd4\x09\xb8\x48\x12\x6c\x0e\xf0\x5b\xbf\x79\x0c\xe3\xb5\x95\x65\x08\x64\x2f\x60\x08\xa5\xdb\xfa\x1c\x98\x63\xcd\x02\x48\x47\xe7\x7e\xb6\x3a\x0e\xcf\xed\x15\x0f\xcf\x75\x5b\x9f\x3b\x37\x44\x6c\x68\xc6\x8f\x41\x9b\xe8\x47\x8c\x9d\x4d\x0b\xdb\x11\xa3\xbd\x6e\xc2\xf5\xaa\xd5\x06\x53\x95\x4d\xe0\xe4\xa9\xac\x96\xe6\x9e\x2b\x9b\xab\x1d\x3f\xea\xc1\x9c\xd3\xc6\x27\x30\xe1\x8f\x97\x41\x22\x9e\xbb\x22\xd6\x64\x1b\x99\xa4\x78\xc6\x95\x9d\x3a\x7a\xae\x52\xc1\xaa\x64\xf5\x9f\x53\xa8\xa5\x17\xa5\xcb\x92\x28\x62\x3c\xba\x12\xf9\x01\xe5\x1d\x76\x7b\x0b\x48\xfc\xc2\x18\x97\x70\xcf\x18\x0f\x6a\xa8\x73\xa1\xbc\x0e\x9d\xb8\x6e\x62\xe3\xdf\xef\xb0\xfb\xbb\xc3\x8d\xcf\xcc\x33\x11\xb7\x8e\x9e\x40\x35\x12\x14\xaf\x73\xcc\x50\x2e\x34\x28\x1a\xde\x61\x33\xdc\x37\x3e\x08\x2f\xf5\x4c\x94\x0c\x30\xa4\x58\xdd\x8f\x8e\x5c\x87\x2e\x0c\xaf\x3a\xda\xe0\x1b\xac\x59\x8d\x08\x31\x1b\x0f\x33\x7b\x83\x93\x05\x30\x6b\x1c\x7f\x0d\x75\xe1\xd9\x9d\x4a\x75\x47\xc8\x3a\x23\x5b\xd3\x56\xa2\x14\xda\xc5\x95\xe2\x25\x33\xe2\x4b\xd7\x81\xee\x43\x51\xd0\x7c\x33\x73\xe7\xfa\x1b\x88\x77\x8d\xb0\x83\x15\xf5\xba\x6c\xf3\xae\x6e\xaf\x5b\x45\xad\x7f\x77\x87\x8a\xfb\xa1\xf6\x92\x2c\xe4\x86\x7d\xb6\x7d\x3a\xed\xee\xef\xc3\xa1\xfe\x76\x6b\x77\xd8\x89\xfb\x6d\x38\x94\x74\x24\xbb\xdd\xf2\x40\x06\xd6\xbd\x5d\x3a\x44\x29\x8b\x0c\x2d\x31\x05\x36\xba\x5f\xa1\x69\x64\x83\xa8\xb1\xb2\x7c\x02\x66\x6f\x1c\xb8\xe4\xfc\xd9\xf9\xf2\x94\xb4\xa4\xc5\xd0\x81\x49\x7d\xaf\xf2\xa8\x5b\xc4\xf8\x43\x22\x64\x16\x9f\x8c\xdd\x31\x83\x4f\x88\xe9\x83\x08\x38\xae\xb1\x27\xce\xf7\x18\x66\x31\xdd\x4e\x0e\xe2\x48\x4a\xf6\x3f\x75\xec\x41\xb8\xf5\xcc\x16\xc9\x76\x7b\x3a\xe8\x89\x7d\xba\x11\x85\x65\x43\x3d\x31\xfd\xc2\x85\x6a\xd2\x0f\x57\x83\xef\x49\x30\x50\x1d\x8e\xb4\x8f\xfd\x26\x11\xfc\x4e\xe9\x7f\x79\xc0\x37\xea\x70\xe7\x73\x7a\xb6\x90\xf6\x03\x15\x1a\x96\xd2\x1c\xef\xc8\xd4\x6b\x72\x9e\xbe\x02\xf3\x8f\xf0\x17\x93\x57\x60\x7e\xf8\xc1\x76\xad\xde\xab\x4c\x30\x12\x9a\xed\x0f\x51\x66\x6e\x56\x31\x7b\x7e\x2a\x34\xb3\x57\xcd\xe8\xbf\x18\x0c\x45\xd1\xdf\x3b\x1a\x8a\xa2\x23\xc3\xa1\x28\x7a\x76\x3c\x14\x0d\x6f\xdf\x2f\x1f\x11\x45\x51\x78\xf8\x8b\xc6\x44\xf6\xe7\x91\x60\xda\x68\x96\xd8\x1c\xda\x99\x51\x90\xce\x8f\x59\x82\xc6\x46\xde\x06\x7b\x6c\xc6\x23\xa4\x23\x33\xa4\xbf\x7d\x88\x34\x9e\x22\x7d\xdb\x18\x69\x38\x47\x8a\xd2\x30\xae\xa2\xf1\x0c\xe2\x3f\x01\x00\x00\xff\xff\x11\x96\xc4\x2e\xe1\x20\x00\x00")

func contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_contextTmpl,
		"context.tmpl",
	)
}

func contextTmpl() (*asset, error) {
	bytes, err := contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.tmpl": contextTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"context.tmpl": &bintree{contextTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

