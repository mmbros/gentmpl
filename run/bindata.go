// Code generated by go-bindata.
// sources:
// context.tmpl
// DO NOT EDIT!

package run

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\xdf\x6f\xe3\x36\xf2\x7f\x96\xfe\x8a\xa9\x13\xa0\x56\x6a\xcb\x69\xf0\xed\xf7\x21\x7b\x3e\xa0\xdb\xdd\x2d\x72\xe8\xee\x06\xd8\x14\xf7\x10\x18\x01\x6d\x51\x0e\x5b\x89\x54\x49\x6a\x93\xc0\xd0\xff\x7e\x98\x21\xa9\x5f\xb6\xb3\x09\x0e\xc5\xe5\x21\x90\xc4\x99\xe1\xcc\x87\xf3\x8b\xe3\xdd\x0e\x32\x9e\x0b\xc9\x61\x52\xb1\xcd\x9f\x6c\xcb\x27\xd0\x34\xf1\x6e\x37\x07\xcb\xcb\xaa\x60\x96\xc3\xe4\x9e\xb3\x8c\xeb\x09\xa4\x6e\xa9\xb7\x42\xbc\xc2\x0a\x25\xcd\xa1\xe5\x7b\x5e\x54\x5c\x1f\x5c\xca\x6b\xb9\x99\x57\x6c\xcb\xe7\xb9\x28\x78\x8f\x44\xe4\x90\x7e\x52\xbf\xb0\xcd\x3d\xc7\x2f\xd1\x11\xae\xf0\x6d\x2e\xd5\x06\x69\x3b\x01\xbc\x30\xc7\x38\x51\x57\x4f\xf8\x2d\xb9\x3d\x79\x32\x7b\x46\xfb\x35\x33\xfc\x79\xfb\xf8\x23\xdf\xd4\xf6\x38\x51\xc9\x84\xdc\xdb\x2d\x8e\xe3\xde\xd1\x84\x03\x68\x9a\x78\xb1\x80\x5f\xb9\xe4\x9a\x59\x9e\xc1\xfa\x09\x76\x3b\x48\xaf\xb5\xda\x6a\x56\x7e\x62\x25\x1a\xfe\x06\xce\xce\xce\xe0\xdd\x67\xf8\xf4\xf9\x06\xde\xbf\xbb\xba\xc1\x77\xe4\xfb\x45\x73\xe4\xba\x24\x9e\x1b\x51\x72\x63\x59\x59\xa5\x1f\x94\x2e\x99\x85\xc9\xc5\xf9\xf9\xff\xcf\xcf\x7f\x9c\x9f\x5f\xc0\x8f\x3f\x5d\x9e\xff\xdf\xe5\xf9\x4f\x61\xc7\x6b\xa6\x59\x69\x2e\x41\xaa\x3b\x02\x7b\x89\x12\xba\x43\x9a\xe1\xc2\x56\xdd\xe5\x24\xc9\x2f\xfe\xaa\xbc\x60\x5c\x67\xc6\x70\x7b\x57\x32\xc9\xb6\x5c\x2f\x27\x48\xf1\x33\x7e\xfa\xe8\xbe\x40\xd3\x4c\x66\x80\x68\xdc\x95\xac\x72\xeb\x1f\x6a\xb9\xf9\xc8\x2a\x5c\x8a\x63\xef\x9b\xce\x5a\xf7\xec\xad\x8d\x63\x51\x56\x4a\x5b\x98\xc6\xd1\xe4\xde\x96\xc5\xa2\x3d\xc1\x38\x9a\x08\x85\xff\x2b\x66\xef\x17\xe8\x66\xf8\x30\x89\x93\x01\xce\x3d\x98\x07\xde\x8c\x3e\xb2\x58\x80\x7d\xaa\x38\xf4\x16\xe2\x88\xbe\x4c\xe3\x28\x22\x18\xfd\x66\xef\x65\x5d\xde\xe0\x42\xd3\xa0\x92\xb5\x90\x16\xa6\x05\x97\x1d\x85\x49\x48\x64\xe4\x4c\xd8\x3e\xc3\x81\xab\x9e\x3a\x21\x1d\x0e\xb1\x6c\x94\x34\x96\x49\x6b\xe2\x88\x1e\x5b\xaf\x32\xbf\x71\x09\x4b\xe4\x19\x6e\x4f\xf2\x1c\xa9\x57\x5e\x33\xb9\xe5\x70\x2a\xb2\xc7\x19\x9c\xf2\x82\x97\x70\xb9\xf4\xbb\xc3\x9c\x74\x45\xaa\x53\xfa\x42\x68\x3b\xa2\xa6\x71\x51\xca\xff\x22\x5e\x38\xf7\x16\x9c\xee\xe9\xb8\x04\xa1\x2c\xeb\xc0\x26\x79\xf8\x3c\xf7\xb6\x39\x41\x52\xd9\x61\xc8\x2f\x16\x50\xaa\xac\x2e\x38\x7c\x65\x5a\xb0\x75\xc1\x4d\x1c\x7d\x65\x1a\xca\xce\x9a\xdb\xbe\xbd\xab\xb3\xf0\xd6\xda\x1b\x47\x83\xd0\x3d\x12\x56\x3e\x3d\x35\x4d\x8c\xce\x07\x94\x8a\x2e\xd0\x4b\xcc\x94\x9e\xe1\x76\x65\xac\x16\x72\x9b\xb4\x4f\xb0\xdb\x43\xfc\x83\x2a\x32\xae\x61\x09\x93\xbe\x4b\xbc\x65\x86\xbf\x13\xe4\xdb\x4e\x7b\x94\x0b\x4e\x48\x1c\xd1\x26\x08\x78\xc9\xfe\xe4\xd3\x20\x7c\x86\x87\xe6\xb6\x4e\x92\x38\xca\x95\x06\x31\x23\xb5\x90\xd4\x1d\x98\x53\x6c\x17\x47\x91\x79\x10\x76\x73\x4f\x8f\x1b\x66\x78\xcb\x9b\xc0\x72\x09\xe7\x8e\xef\xf6\x7c\x85\x6f\xdf\xa7\xdf\x0f\xde\x43\x34\xa4\x5f\x78\xc5\x34\xb3\x4a\x5f\xe2\x79\x93\x8a\x6e\x35\x8e\xa2\x8c\xe7\xac\x2e\xec\x78\x85\xf8\xfe\xa5\x84\x9c\x8e\x10\x70\x3b\x24\x71\x14\xe1\x59\x93\x85\xb7\x62\x05\x4b\xb2\x3c\xc6\x8f\x9a\xdb\x5a\x4b\x7a\x37\x71\x13\x63\x6e\xd9\x72\x1b\x10\xfb\x40\x96\x39\x1a\x03\xf6\x3e\xd8\x5a\x1b\x97\xeb\xf0\x8b\x9c\xdb\xfb\x16\x79\x77\x6a\x63\x09\x53\x09\x47\x42\xf3\xd0\x29\x62\x30\x2c\x16\x7e\x27\xa7\x58\x14\xb9\xb7\x25\xdc\xa6\x69\xea\x39\x76\x28\x94\x19\xab\x2f\x8c\xd5\x90\x3a\x5d\x9b\x06\xa0\x71\x02\xda\x82\x24\x64\xc6\x1f\xc1\x2a\x60\x5a\xb3\x27\x50\x39\xc9\x76\x9f\xe3\x28\xb2\xe2\x82\xe5\x22\xc8\xbe\x5d\x0d\x63\x9f\xc4\x62\xec\xef\x0e\xc4\x28\x43\x3a\x8c\xd1\x9b\xab\x8b\x9f\x3f\x5c\xb5\x41\x0a\xbb\x1d\x2e\x91\x62\x44\xd4\x34\xd0\xcc\xc0\x65\x0e\xa7\xce\x69\x2f\x11\x50\xd4\xee\x85\x63\xd4\xa6\x9b\x2d\xb7\x04\x75\x5b\xa7\x1c\x1a\x24\x08\x23\x51\x64\x8f\xe4\xb9\xce\x92\x5b\xb9\x22\xae\x75\x2d\x8a\x8c\xf8\x06\x76\x9b\x38\x42\xd0\x8e\x78\x3a\x8a\x0a\x8e\xfe\xc7\x0c\x50\xb1\xd6\xcf\x69\x1b\x84\x01\xf9\x6f\xff\x58\x79\xef\x33\xb7\x22\x7b\x5c\xf5\xbd\x09\xd7\xe3\x51\x94\xf7\xc3\x7c\xaf\xd5\x70\x45\xed\x25\xde\xd6\x42\xa0\x72\x7a\x47\x29\xce\xe9\xa6\x55\x57\x8f\xb6\x43\x1f\x73\x4e\x38\xf4\x35\xf4\x30\xad\x4a\x12\x80\xbe\xd1\x0a\x6e\x51\xa5\x0c\x71\x61\x83\x63\x1c\xf1\xe0\x1d\xe6\xb5\x39\xb4\xc7\x9d\x5e\x5f\x5d\xdc\x78\x4f\x68\x0e\x9f\x5e\x5f\xf5\x88\xfc\xa7\xba\xb0\xb7\xf8\xba\x6a\x21\xdc\x0b\x21\x9b\x8c\x10\x3d\x88\x67\xd7\x2c\x39\x48\x83\x8c\x01\xaa\x7b\xa9\xf9\x55\x60\x06\xa6\x69\x02\xfb\x49\x1e\x91\x45\xdc\xd0\x6f\xbe\x85\x1b\x1c\xf8\x7b\x0e\x4a\x8f\x4c\x57\x72\xd0\xef\x1c\x6c\xab\xd7\x60\xd3\x35\xa8\xff\x33\x8c\x9c\x5f\xe3\xc1\xb3\x2d\x4f\xbd\x7b\x86\x5e\xfb\x77\xc3\x7f\x55\x6f\x85\xcc\x98\x65\xae\x58\x2e\xce\x30\x66\x7b\x0d\x1b\x16\x8c\xad\x9a\xaf\x1d\x51\x7c\xb6\x70\x96\xd4\x86\xf7\x3e\xc3\xc7\xda\x58\x6a\xea\xa8\x91\x43\x27\x2f\x14\xcb\xba\x2a\x19\xdb\xb2\x2a\x28\x6f\x04\x15\x3f\xf1\x87\x69\x5b\x50\xb0\x5c\xba\xca\x77\x7b\xbe\x4a\x12\xaf\x5d\xd7\x05\xd2\xa3\x99\x0e\x5b\xc3\xa4\x3b\x06\x4c\x21\x77\x33\x57\x64\x87\xb5\xb2\x5f\xd0\x13\x74\x19\x54\x24\xbd\x66\xda\xf0\xa9\x8b\xd0\x69\xab\xfb\x14\x69\x93\x04\xbd\xdf\x3b\x00\x12\xf7\xaf\x15\x47\xf0\x91\x4a\x72\x87\x4c\xe0\x0b\x56\xa2\x6c\xd7\x71\xcd\x07\x26\xb9\xac\xfb\x22\x30\x0e\xdb\xee\x4c\x70\xc7\xb9\x6f\x68\x9a\xa6\x89\xdf\x95\x54\x1f\x6d\xf7\x62\xde\xae\x5d\x1b\xdd\x86\x9e\x77\x7f\x77\x2f\x72\x8e\x82\xd6\x1c\x74\x77\x90\xd8\x56\xbe\xc6\xd5\x09\x98\x04\xc6\x45\x1c\x77\x3b\x50\xaf\xbb\x72\xfd\x96\x08\xb0\x2e\x86\xae\x93\xff\xe5\x4b\x2e\x2d\x25\xa1\xf7\xbe\xba\x78\x7b\xd5\x76\xea\x8b\x33\xe0\x6c\x73\xef\xb2\xf6\x3d\x33\xc0\x20\x13\x79\xce\x35\x97\x6e\x4f\xa0\x13\x0f\xb9\x82\xb4\x08\x99\xb5\x7f\x13\x75\xa2\x8c\x2a\x9d\x95\x06\xee\xd9\x57\x4e\x46\x1b\x04\x80\x24\xcd\xff\x09\x9a\x97\xac\x02\xc9\x79\x16\x04\x3b\xeb\x2a\x71\xb1\x16\xfd\x04\x37\x82\x65\xd0\x00\x38\x13\x9c\xa5\x43\xbd\x50\x4a\x48\x60\xbd\xee\xf8\x05\x87\xd9\x5e\x61\xdd\x79\xbe\x77\xaf\xc0\xaa\xaa\x10\x1c\x51\xa9\xd0\x9b\x32\x5f\xdd\xc2\xe1\x62\x99\x43\x13\x2b\xbe\x11\xb9\xe0\x19\x50\x9a\x50\xeb\x3f\xf8\xc6\xce\x50\xce\x83\x16\x16\x8f\x11\xa9\x54\x6d\xab\xda\x22\xcf\x83\x4e\x71\xf1\x2a\x07\x26\x81\x6b\xad\x34\xa8\xcd\xa6\xd6\x06\x9c\x1a\x81\xa3\x2b\x70\xba\x95\x24\xac\xf1\x92\x66\x81\x5a\x49\x94\x66\xac\xaa\xcc\x0c\xd6\xb5\x45\x5d\xad\x60\x05\x68\x6e\xea\xc2\x1a\x28\xd9\x13\xb0\x42\x73\x96\x3d\xb9\x73\x59\x73\x2e\x49\xa2\xe5\x32\x18\xe1\xd5\xc3\xaf\xdc\xe9\xf7\x73\xa7\x00\x4a\x58\x73\xbf\x21\xcf\xc0\xb0\x9c\x17\x4f\x20\xb0\xd1\xd5\xac\x28\x78\x91\x7e\xd3\xb1\x3d\xa6\xd3\x07\x0d\x42\xa5\xff\xa6\x7d\x66\x0e\x31\x21\x2d\xd7\x39\xdb\xf0\x5d\x93\x78\x40\x7c\x12\x6b\x73\x7a\x57\x01\xe2\x88\x62\x2a\x2c\xb8\x78\x89\x23\xbc\x66\xe1\xf7\xef\x96\x30\x99\x50\x57\xd5\x4b\x6f\xa9\xdf\xbc\x95\xf2\xa0\x67\x44\xee\x14\x48\xfa\xf5\xb0\x4f\x4f\x74\x8e\x62\xe0\x44\x63\x1f\x72\x13\x0e\xf4\x9d\x33\x87\x03\x7e\x98\x26\xbb\x70\x2d\x22\x4c\x06\x90\xd0\xe5\x31\xe0\x44\x77\xcf\xa9\xeb\x63\xfd\xf5\xf4\xdc\x85\xe8\x03\xf5\x95\xca\xa4\x5f\x6c\xa6\x6a\x1b\x93\x9d\x5c\xeb\xd6\xfc\xbe\xa2\x52\x14\xc9\x1b\x5a\xfd\x6e\x89\x2f\x84\x42\x5e\xda\xf4\x5a\x0b\x69\xa7\x5c\x6b\x32\xb4\x89\xcf\x16\xc7\x22\xc2\xaa\xb2\x40\x43\x4e\x60\xcb\x25\x1d\xc0\x46\xc9\x5c\x6c\x6b\xcd\xd0\xd1\xdc\x45\x6d\x7a\xf3\xf9\xe3\x6f\x49\x1c\x9f\x80\x9f\x54\x38\xe4\xad\xa2\x82\x29\x24\xf9\xd3\xb6\x9d\xe1\xf8\xd1\x46\x0a\x53\x7f\xdd\x82\x49\x5b\x32\x27\x6d\x95\xee\x0f\x3d\x30\x1d\x7b\xae\x3b\x12\xed\x2f\x9e\xc3\xc1\xc8\x24\x1e\xa4\xfe\x93\x31\x87\x5f\xf7\x56\x9e\xc0\x3b\x45\x17\x71\xea\x55\xba\xa2\x9d\xc2\x67\xd9\xe5\xc0\x80\xe7\x30\xfe\x1e\x44\x51\xa0\xff\x6b\xbe\x71\x13\xa6\x34\x3e\x81\xdf\x0d\xcf\xeb\xa2\x00\x2c\xcb\x19\x5f\xd7\x5b\xa8\x6a\x5d\x29\xc3\x4d\x3a\x9e\xf2\xa1\x7a\x61\xb2\x04\x4b\xb0\xba\xe6\x23\xdd\x7b\xab\x39\x2b\x0c\x3f\xac\xba\xef\x47\xdc\x14\x0a\xd4\x18\xe8\x8d\xca\xf8\x8b\x35\x6b\xa7\x57\x5e\xb9\x76\xba\x75\x54\xc1\x3e\xc5\x21\x25\x5d\x6b\x14\x3a\x06\xe7\x0d\x29\x5c\x2b\x63\xc4\x9a\x26\x1d\x45\xcd\xcd\x65\x7c\x02\x73\xea\x25\x5a\x77\x48\xe8\x53\xaf\xfd\xf2\x3a\x0e\xe6\x67\xa8\xc4\xa8\x25\x81\x83\x53\xb6\x91\xde\x7b\x3c\x63\xaf\x18\xe4\x29\x9a\x7c\x91\xff\xd0\x1d\xe9\x25\xae\x1c\xf8\xfb\x9e\xdc\x93\xe8\x5c\x79\xcb\xef\xb8\xac\xcb\x3b\x92\xdf\x3a\xf3\x20\x41\xee\x7b\xf3\x98\x69\xac\xf9\x17\xea\x02\xfc\x75\x8e\x19\xa8\x34\xcf\xc5\x23\x30\x99\x81\xa9\x73\x7c\xf4\xfa\x87\x9d\xba\x91\x1a\x7a\x09\xc0\x3b\x67\x03\x9d\x09\xfe\x75\x5b\x7a\x51\x4b\x67\xde\x64\x6f\xdd\xcb\x27\xa5\x70\xed\xfd\x23\x2b\xab\x82\xf7\x05\xc1\xc4\x4d\x63\x7f\x37\x5c\x4f\x66\x5e\xb9\xa5\x93\x37\xf3\x0a\x2e\x27\x13\xec\x0a\xf0\x5b\x47\x3c\x86\xf1\xda\xe9\x32\x04\xb2\x53\xb0\x0f\xa5\x27\x7d\x0e\xcc\xb1\x65\x3d\x48\x47\xfb\x7e\x71\x36\x0e\xf7\xed\x0c\xef\xef\xeb\x49\x9f\xdb\xb7\x8f\xd8\xf0\x18\x3f\xf5\x3a\xc4\x30\x0d\x6c\xcf\x34\x77\xcd\x30\x9e\xd7\x4d\x7f\xbd\xac\xb1\x27\xf4\x73\x5b\xe7\xa9\x4c\x2a\x7b\xcf\xb5\x4b\xd1\x5e\x1e\x35\x5f\x61\xb4\x3c\xc5\x64\xd7\xa5\xde\x85\xaf\x5c\x55\xba\x55\x13\x8c\xc1\x2b\x37\xa8\x0c\x22\x95\x86\x75\xc1\xe4\x9f\x33\x90\x2a\xe8\xd1\x66\x42\xd4\x2f\x1e\xdd\x60\xe6\x7e\xc8\x78\x87\x3d\xde\x12\x26\x61\x61\x0c\x4a\x9f\x66\x0c\x06\x35\xd2\x99\xd0\xc1\x80\x56\x5b\x3f\x6a\x09\xef\x77\xd8\xf1\xdd\x21\xe1\x33\x33\x49\x04\xad\xe5\x27\x44\xad\x02\xcd\x65\x86\xe9\xc9\xc7\x05\x85\xc2\x7b\x4c\xff\x5d\xb3\x83\xd8\x52\x9f\xc4\x64\x37\xea\xf1\x0d\xb9\xb0\xbc\x6c\x59\x7a\xdf\x60\xc3\x24\xac\x7d\x04\xcc\xdd\x25\x4d\xe5\xc0\xdc\x71\x84\xab\xa2\x0f\xc8\x76\x2b\x2a\x27\xd8\xc0\x39\xae\x70\x59\x08\x47\xd9\x6f\x34\x85\xdc\x14\x75\xd6\x96\xd7\x4d\xad\xa9\x47\x6f\xaf\x3b\x71\x37\x2f\x5e\x11\xa8\x7e\xb0\xe6\xba\x9c\xd3\xf6\x86\x3c\x9c\x97\xef\x76\x8e\xc2\x0d\xb3\x6f\xfb\x03\x40\xcf\xd2\x34\xab\x03\x19\xd3\x74\x50\xb6\x68\x50\xd4\xf7\xc0\x1b\x5d\x82\x30\x2f\xa9\x0a\xad\x65\x45\xf1\x04\xcc\x5d\x0a\x70\x29\x75\xce\xe7\x1d\x6f\x46\xf6\xd1\x62\xdf\xdb\xc8\xf0\x60\xec\xa8\x9d\xc3\x48\xa1\xd1\x69\x2f\x94\x3a\x60\x4e\xe0\x33\xa2\xf9\x20\x7a\x12\x37\xd8\xb4\x66\x7b\x02\xd3\x98\xae\x0f\x07\x11\x24\xf3\xba\xdf\x0f\xf6\xc0\xdb\x05\x61\xcb\xc9\x6e\x77\x3a\x68\x5a\x43\x62\x10\xb9\x13\x43\x4d\x2b\xfd\x6c\x84\x66\xd2\xaf\x41\x83\xef\x93\xde\xd8\xb2\x19\xa0\x7f\x6c\xd0\xdf\xfb\xf1\x2f\x8c\xfa\xf1\x8d\x5a\xd0\xc5\x82\x9e\x1d\xa4\xdd\xb0\x82\x46\x92\x34\x2d\x3b\x32\x51\x9a\x9e\x27\x6f\xc0\xfe\xa3\xff\x33\xc4\x1b\xb0\x3f\xfc\xe0\xda\xca\xe0\x4f\x87\x06\x6b\xff\xdd\xe0\x85\x86\xcd\xaf\x1d\xbd\x44\xd1\xdf\x3b\x7c\x89\xa2\x57\x8c\x5f\xa2\x17\x0d\x60\xdc\x8f\x08\xbd\xf1\x9b\x5d\x61\xef\xf5\xda\x69\xcc\x21\x19\xe3\xc9\xcc\x91\xd1\xcc\xdf\x3e\x9b\x19\x0f\x67\x5e\x37\x9d\x19\x8e\x67\xa2\xfe\xaf\x9a\xd1\xf8\x56\xff\x9f\x00\x00\x00\xff\xff\x1b\x18\x09\x2e\xe7\x1f\x00\x00")

func contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_contextTmpl,
		"context.tmpl",
	)
}

func contextTmpl() (*asset, error) {
	bytes, err := contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.tmpl": contextTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"context.tmpl": &bintree{contextTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

