// Code generated by go-bindata.
// sources:
// context.tmpl
// DO NOT EDIT!

package run

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\x5f\x6f\xdb\xb8\xb2\x7f\x96\x3e\xc5\xac\x12\x60\xad\xac\x2d\x67\x83\xbb\xf7\x21\xbd\xbe\x40\xbb\x6d\x17\xb9\xd8\xb6\x01\x9a\xe2\x3e\x04\x46\x96\xb6\x28\x87\xbb\x92\xa8\x25\xa9\x26\x81\xe1\xef\x7e\x30\x43\x52\xa2\x64\x3b\x4d\x0f\xb0\x38\x7e\xb2\x44\xce\x70\xe6\x37\x7f\x39\xda\x6e\x21\xe7\x85\xa8\x39\x24\x0d\x5b\xff\xc5\x36\x3c\x81\xdd\x2e\xde\x6e\x67\x60\x78\xd5\x94\xcc\x70\x48\xee\x39\xcb\xb9\x4a\x20\xb3\x4b\xc1\x0a\xd1\x0a\x23\x64\xad\x0f\x2d\xdf\xf3\xb2\xe1\xea\xe0\x52\xd1\xd6\xeb\x59\xc3\x36\x7c\x56\x88\x92\x07\x5b\x44\x01\xd9\x47\xf9\x2b\x5b\xdf\x73\x7c\x13\x1d\xa1\xf2\xef\x66\xb5\x5c\xe3\xde\x9e\x01\x2f\xf5\x31\x4a\x94\xd5\x6d\xfc\x16\xdf\x80\x5f\x9d\x3f\x23\xfd\x8a\x69\xfe\xbc\x7e\xfc\x91\xaf\x5b\x73\x7c\x53\xc5\x44\xbd\x77\x5a\x1c\xc7\x81\x69\xbc\x01\x76\xbb\x78\x3e\x87\xdf\x78\xcd\x15\x33\x3c\x87\xd5\x13\x6c\xb7\x90\x5d\x2b\xb9\x51\xac\xfa\xc8\x2a\x54\xfc\x15\x9c\x9d\x9d\xc1\xdb\x4f\xf0\xf1\xd3\x0d\xbc\x7b\x7b\x75\x83\xcf\x48\xf7\xab\xe2\x48\x75\x49\x34\x37\xa2\xe2\xda\xb0\xaa\xc9\xde\x4b\x55\x31\x03\xc9\xc5\xf9\xf9\x7f\xcf\xce\x7f\x9e\x9d\x5f\xc0\xcf\xbf\x5c\x9e\xff\xd7\xe5\xf9\x2f\xfe\xc4\x6b\xa6\x58\xa5\x2f\xa1\x96\x77\x04\xf6\x02\x39\xf4\x46\x9a\xe2\xc2\x46\xde\x15\xc4\xc9\x2d\xfe\x26\x1d\x63\x5c\x67\x5a\x73\x73\x57\xb1\x9a\x6d\xb8\x5a\x24\xb8\xe3\x35\xbe\xfa\x60\xdf\xc0\x6e\x97\x4c\x01\xd1\xb8\xab\x58\x63\xd7\xdf\xb7\xf5\xfa\x03\x6b\x70\x29\x8e\x9d\x6f\x5a\x6d\xed\x7f\xa7\x6d\x1c\x8b\xaa\x91\xca\xc0\xc4\x3b\xcf\x0d\x7f\x34\x37\x1e\xe2\x19\x9a\x3a\x31\xfc\xd1\xcc\x3b\xcb\x92\x77\x93\x97\xd8\xd5\x7b\x53\x95\xe3\x55\x6b\x85\x28\x11\x32\x89\xa3\xa4\x61\xe6\x7e\x8e\x7e\x8a\x7f\x92\x38\x1d\x18\x2a\xb0\xd3\x20\x1c\x90\x7e\x3e\x07\xf3\xd4\x70\x08\x16\xe2\x88\xde\x4c\xe2\x28\x22\x3b\xb8\x73\xdf\xd5\x6d\x75\x83\x0b\xbb\x1d\x6a\xd9\x8a\xda\xc0\xa4\xe4\x75\xbf\x43\xa7\xc4\x32\xb2\x18\x6c\x9e\xa1\xc0\x55\xb7\x3b\x25\x19\x0e\x91\xac\x65\xad\x0d\xab\x8d\x8e\x23\xfa\xdb\xb9\xa5\xfe\x9d\xd7\xb0\x40\x9a\xe1\xf1\xc4\xcf\x6e\x75\xc2\x2b\x56\x6f\x38\x9c\x8a\xfc\x71\x0a\xa7\xbc\xe4\x15\x5c\x2e\xdc\xe9\x16\x5a\xda\x75\x4a\x6f\xc8\x5c\x76\xd3\x6e\x67\x2d\xc5\xff\x26\x5a\x38\x77\x1a\x9c\xee\xc9\xb8\x00\x21\x0d\xeb\xc1\x26\x7e\xf8\x7f\xe6\x74\xb3\x8c\x6a\x69\x86\x39\x63\x3e\x87\x4a\xe6\x6d\xc9\xe1\x2b\x53\x82\xad\x4a\xae\xe3\xe8\x2b\x53\x50\xf5\xda\xdc\x86\xfa\x2e\xcf\xfc\x53\xa7\x6f\x1c\x0d\x62\xff\x48\x5c\xba\xfc\xd6\xa5\x2e\x12\xe5\x8b\xe6\xbf\xc9\x37\xa2\xce\x99\x61\x24\x2a\x7a\x36\x50\x9e\xbb\x40\x0f\xd2\x13\xfa\x0f\xb7\x4b\x6d\x94\xa8\x37\x69\xf7\x0f\xb6\x7b\xd6\x78\x2f\xcb\x9c\x2b\x58\x40\x12\xba\xcb\x1b\xa6\xf9\x5b\x41\x81\x63\x35\x43\xbe\x60\x99\xc4\x11\x1d\x82\xc6\xa8\xd8\x5f\x7c\xe2\x99\x4f\xd1\xa0\xf6\xe8\x34\x8d\xa3\x42\x2a\x10\x53\x12\x0b\xb7\x5a\x63\x5a\xc1\xb6\x71\x14\xe9\x07\x61\xd6\xf7\xf4\x77\xcd\x34\xef\x68\x53\x58\x2c\xe0\xdc\xd2\xdd\x9e\x2f\xf1\xe9\xc7\xec\xc7\xc1\xb3\x8f\x94\xec\x33\x6f\x98\x62\x46\xaa\x4b\xf4\x05\x12\xd1\xae\xc6\x51\x94\xf3\x82\xb5\xa5\x19\xaf\x10\xdd\xff\x49\x51\x4f\x46\x08\xd8\x13\xd2\x38\x8a\xd0\x0f\x48\xc3\x5b\xb1\x84\x05\x69\x1e\xe3\x4b\xc5\x4d\xab\x6a\x7a\xd6\xf1\x2e\x8c\x63\xcc\x61\xef\x49\x33\xbb\x47\x83\xb9\xf7\xba\xb6\xda\x26\x52\x7c\xf3\x87\xf9\xa3\x03\xde\x1a\x6d\x62\xe0\x48\x94\xa6\x96\xe3\x64\x68\x3c\x34\x05\x46\xc7\x7c\xee\xd8\x5b\x69\xa2\xc8\x3e\x2d\xe0\x36\xcb\x32\xb7\x7f\x8b\xac\x99\x36\xea\x42\x1b\x05\x99\x15\x70\xb7\x03\xd8\x59\x06\x5d\x89\x13\x75\xce\x1f\xc1\x48\x60\x4a\xb1\x27\x90\x05\xf1\xb6\xaf\xe3\x28\x32\xe2\x82\x15\xc2\xf3\xbe\x5d\x0e\x93\x01\xb1\xc5\x64\xb0\x3d\x10\xb4\x0c\xf7\x61\xd0\xde\x5c\x5d\xbc\x7e\x7f\xd5\x45\x2d\x6c\xb7\xb8\x44\x82\xd1\xa6\xdd\x0e\x76\x53\xb0\xa9\xc4\x8a\x73\x1a\x64\x06\x0a\xe3\xbd\xf8\x8c\xba\xfc\xb3\xe1\x86\xf0\xed\x2a\x9f\x45\x83\x18\x61\x68\x8a\xfc\x91\xdc\xd5\x6a\x72\x6b\x96\x44\xb5\x6a\x45\x99\x13\xdd\x40\x6f\x1d\x47\x08\xda\x11\xf7\x46\x56\xde\xbb\xff\x9c\x02\x0a\xd6\x39\x37\x1d\x83\x30\x20\xfd\xed\x9f\x4b\xe7\x72\xfa\x56\xe4\x8f\xcb\xd0\x85\x70\x3d\x1e\x85\x7d\x18\xf7\x7b\xcd\x8b\x2d\x93\x2f\x71\xb1\x0e\x02\x59\xd0\x33\x72\x71\xae\xd6\xf4\x15\x6e\xf3\x6d\x4f\x43\x0f\x53\xb2\x22\x06\xe8\x1b\x1d\xe3\x0e\x55\x4a\x0b\x17\xc6\x3b\xc6\x11\x3f\xde\x62\xa2\x9b\x41\x67\xee\xec\xfa\xea\xe2\xc6\x79\xc2\xee\xb0\xf5\x42\xd1\x23\xf2\x9f\xe6\xc2\xdc\xe2\xe3\xb2\x83\xd0\x64\x4e\xe8\x11\x8e\x07\x51\xec\x9b\x2e\x0b\x64\x57\xbe\x43\x2c\xf7\x32\xf4\x77\x41\xe8\x89\x26\x29\xec\xe7\x7a\x1f\xb9\xe8\x2d\xdf\x42\x0b\x0e\xfc\x9e\x03\xd0\xe1\xd1\x57\x1e\xf4\x36\x0b\xd6\xf2\x7b\xb0\xe9\x1b\xdd\xff\x18\x46\xd6\x9b\xd1\xdc\x6c\xc3\x3b\xfb\xba\xb6\x6b\x50\xf4\xa8\x1e\xce\xcf\x30\x52\x83\xc6\x0f\x6b\xc3\x46\xce\x56\x76\x53\x7c\x36\xb7\x9a\xb4\x9a\x07\xaf\xe1\x43\xab\x0d\x35\x87\xd4\x10\xa2\x6b\x97\x92\xe5\x7d\x41\x8c\x4d\xd5\x94\x94\x2d\xbc\x88\x1f\xf9\xc3\xa4\xab\x1d\x58\x19\x6d\x91\xbb\x3d\x5f\xa6\xa9\x93\xae\xef\x26\xe9\xaf\x9e\x0c\x5b\xcc\x74\x50\xeb\x0f\xa9\x83\xf9\xe4\x6e\x6a\xcb\xec\x5e\xb5\x0c\x6e\x1d\xc7\xf7\x85\xa5\x3f\x75\x44\xae\xad\x41\x8d\xb2\x6b\xa6\x34\x9f\xd8\x00\x9f\x74\x20\x4c\x90\x2a\x4d\x31\x8c\x7c\x64\x55\x4d\x19\x9e\x78\x04\xe8\x5a\xd6\xdc\x42\xec\xe9\x3c\x5c\xc8\xdb\x76\x70\xb3\x01\x36\x36\x69\xbf\x08\xd5\xc3\x20\x5a\x15\xac\x5f\xec\xab\x9c\x65\x59\xea\x4e\xed\x9b\xef\xfe\xb8\x17\xd3\xf6\xed\x5f\x8f\xe0\x0b\xe2\xc8\x5e\xd4\xac\xc7\xa1\x36\x07\xe3\x06\x6a\x6c\x53\xbf\x27\x66\x08\x98\x14\x86\x1d\x00\x9e\x75\xa0\xd8\xf7\xb5\xfe\x0d\x6d\xc0\xa2\xea\x7b\x58\xfe\xb7\xab\xd7\xb4\x94\xfa\x4e\xfe\xea\xe2\xcd\x55\xd7\xf7\xcf\xcf\x80\xb3\xf5\xbd\x4d\xf9\xf7\x4c\x03\x83\x5c\x14\x05\x57\xbc\x36\x74\x26\x90\xbd\x7d\xca\x21\x29\x7c\x5a\x0e\x2f\xc6\x96\x95\x96\x95\xd5\x51\xc3\x3d\xfb\xca\x49\x65\x8d\xea\x13\xa7\xd9\xff\x82\xe2\x15\x6b\xa0\xe6\x3c\xf7\x8c\xa9\xa2\x88\x8b\x95\x08\xb3\xe4\x08\x92\x41\xef\x60\x15\xb0\x7a\x0e\xa5\x42\x2e\x3e\x0b\x46\xdf\x65\xc8\xee\x3e\x6d\x6d\xf9\xce\x3e\x02\x6b\x9a\x52\x70\xc4\xa4\x41\x4f\xca\x5d\x61\xf4\x86\xc5\x0a\x89\x0a\x36\x7c\x2d\x0a\xc1\x73\xa0\xc0\x96\xab\x3f\xf9\xda\x4c\x91\xcf\x83\x12\x06\x4d\x88\xbb\x64\x6b\x9a\xd6\x20\xcd\x83\xca\x70\xf1\xaa\x00\x56\x03\x57\x4a\x2a\x90\xeb\x75\xab\x34\x58\x31\x3c\x45\x5f\x1b\x55\xc7\x49\x18\xed\x38\x4d\xfd\x6e\x59\x23\x37\x6d\x64\xa3\xa7\xb0\x6a\x0d\xca\x6a\x04\x2b\x41\x71\xdd\x96\x46\x43\xc5\x9e\x80\x95\x8a\xb3\xfc\xc9\x5a\x65\xc5\x79\x4d\x1c\x0d\xaf\xbd\x12\x4e\x3c\x7c\xcb\xad\x7c\xaf\x7b\x01\x90\xc3\x8a\xbb\x03\x79\x0e\x9a\x15\xbc\x7c\x02\x81\x8d\xb1\x62\x65\xc9\xcb\xec\x9b\x4e\xed\x30\x9d\x3c\x28\x10\x32\xfb\x7f\x3a\x67\x6a\x11\x13\xb5\xe1\xaa\x60\x6b\xbe\xdd\xa5\x0e\x90\xad\x4d\x60\x5d\x61\xe8\xcb\x48\x1c\x51\x3c\xf9\x05\x1b\x2b\x71\x84\xf7\x24\x7c\xff\xc3\x02\x92\x84\x1a\xb2\x20\xb5\x65\xee\xf0\x8e\xcb\x83\x9a\xd2\x76\x2b\x40\x1a\x16\xd5\x70\x3f\xed\xb3\x3b\x06\x4e\x34\xf6\x21\x3b\x6e\x41\xdf\x39\xb3\x38\xe0\x8b\x49\xba\xf5\xd7\x28\xc2\x64\x00\x09\x5d\x44\x3d\x4e\x74\x8f\x9d\xd8\x16\xd8\x5d\x75\xcf\x6d\x80\x3e\x50\x4b\x2a\x75\xf6\xd9\xe4\xb2\x35\x31\xe9\xc9\x95\xea\xd4\x0f\x05\xad\x45\x99\xbe\xa2\xd5\x1f\x16\xf8\x40\x28\x14\x95\xc9\xae\x95\xa8\xcd\x84\x2b\x45\x8a\xee\xe2\xb3\xf9\xb1\x88\x30\xb2\x2a\x51\x91\x13\xd8\xf0\x9a\x0c\xb0\x96\x75\x21\x36\xad\x62\xe8\x68\xf6\x62\x37\xb9\xf9\xf4\xe1\xf7\x34\x8e\x4f\xc0\x8d\x4d\x2c\xf2\x46\x52\xd5\x15\x35\xf9\xd3\xa6\x1b\x28\xad\x65\xce\x33\x98\xb8\xbb\x19\x24\x5d\xd1\x4d\xba\x3a\x1f\x8e\x5f\x30\x0f\xbb\xd1\xcc\x1d\xf1\x75\xb7\xd4\xe1\x88\x66\x34\x70\x39\x19\x53\x0c\x46\x2e\xf1\x09\xbc\x95\x74\x8d\xa6\x6e\x67\x10\x5c\x3a\x8b\x4f\xe0\x35\xd4\xfc\xa1\x77\xf7\x07\x51\x96\xe8\xef\x6b\x3b\xdc\x02\x59\x03\xff\xca\xd5\xd3\x00\x72\xa4\xfb\xa2\x79\xd1\x96\x25\x60\x81\xce\xf9\xaa\xdd\x40\xd3\xaa\x46\x6a\xe4\x3a\x1a\x3b\xa2\x94\x7e\xd4\x05\x0b\x30\xaa\xe5\x23\x15\x82\xd5\x82\x95\x9a\x1f\xd6\xc0\xce\xc3\x0e\x40\x0c\x0f\xc2\xdc\xc3\x46\xce\xed\x8e\x17\x8b\xd7\xcd\xd4\x9c\x84\xdd\xcc\xed\xa8\x94\xe1\x8e\x43\x92\xda\x46\xcb\xb7\x0d\xd6\x2d\x32\xb8\x96\x5a\x8b\x15\x8d\x4f\xca\x96\xeb\xcb\xf8\x04\x66\xd4\x50\x74\xae\x91\xd2\xab\xa0\x99\x73\x32\x0e\xa6\x7a\x28\xc4\xa8\x2f\x81\x83\xb3\xbf\x91\xdc\x7b\x34\x63\x0f\xf9\xa2\xd1\x29\x82\x99\x1e\x88\x5a\x1b\xce\x72\x2c\xdd\x83\x71\x5e\x76\x74\x2a\x88\xf4\x77\x1d\xfd\x41\xfc\xc6\x5b\x0e\x01\x38\xc8\x9d\x34\xd9\x23\xb7\xa6\x2b\xdf\x5e\x78\x39\xcf\x0f\x23\xcc\xd3\x87\x01\x16\x70\xb4\x11\xb6\xe1\x77\xbc\x6e\xab\x3b\xe2\xdf\xc5\xd8\x20\x69\xef\x07\xd9\x98\x68\x0c\xe2\x67\xea\x4b\xdc\xed\x94\x69\x68\x14\x2f\xc4\x23\xb0\x3a\x07\xdd\x16\xf8\xd7\xc9\xef\x4f\xea\x47\x86\xe8\xb0\x00\x6f\xad\x0e\xe4\x1e\xf8\xeb\x8f\x74\xac\x16\x56\xbd\x64\x6f\xdd\xf1\x27\xa1\x70\xed\xdd\x23\xab\x9a\x92\x87\x8c\x20\xb1\xe3\xea\x2f\x9a\xab\x64\xea\x84\x5b\x58\x7e\x53\x27\xe0\x22\x49\xb0\x4f\xc1\x77\xfd\xe6\x31\x8c\xd7\x56\x96\x21\x90\xbd\x80\x21\x94\x6e\xeb\x73\x60\x8e\x35\x0b\x20\x1d\x9d\xfb\xd9\xea\x38\x3c\xb7\x57\x3c\x3c\xd7\x6d\x7d\xee\xdc\x10\xb1\xa1\x19\x3f\x06\x1d\xab\x9f\x76\x76\x36\x2d\x6c\x73\x8e\xf6\xba\x09\xd7\xab\x56\x1b\xcc\x9a\xb6\x96\x90\xa7\xb2\x5a\x9a\x7b\xae\x6c\xd9\x70\xfc\xa8\x1d\x74\x4e\x1b\x9f\xc0\x84\x3f\x5e\x06\x35\x61\xee\xea\x69\x93\x6d\x64\x92\xe2\x19\x57\x76\x00\xea\xb9\x4a\x05\xab\x92\xd5\x7f\x4d\xa1\x96\x5e\x94\x2e\x61\xa3\x88\xf1\xe8\x76\xe6\x67\xa5\x77\xd8\x78\x2e\x20\xf1\x0b\x63\x5c\xc2\x3d\x63\x3c\xa8\xb7\xcf\x85\xf2\x3a\x74\xe2\xba\xe1\x91\x7f\xbe\xc3\x46\xf4\x0e\x37\x3e\x33\x5a\x45\xdc\x3a\x7a\x02\xd5\x48\x50\xbc\xce\x31\x59\xba\xd0\xa0\x68\x78\x87\x7d\x79\xdf\x83\x21\xbc\xd4\xbe\x51\x32\xc0\x90\x62\x75\x3f\xc5\x72\x97\x05\x61\x78\xd5\xd1\x06\xef\x60\xcd\x6a\x44\x88\xd9\x78\x98\xd9\xcb\xa4\x2c\x80\x59\xe3\xf8\x1b\xb1\x0b\xcf\xee\x54\x2a\x81\x42\xd6\x19\xd9\x9a\xb6\x12\xa5\xd0\x2e\xae\x14\x2f\x99\x11\x5f\xbb\x66\x78\x1f\x8a\x82\x46\xad\x99\x3b\xd7\x5f\x86\xbc\x6b\x84\xcd\xb4\xa8\xd7\x65\x9b\x77\x2d\xc4\xba\x55\x74\x0b\xe9\xf3\x6e\x3f\x5f\x5f\x92\x85\xdc\xdc\xd1\x76\x72\xa7\xdd\x28\x61\xf8\x7d\x61\xbb\xb5\x3b\xec\xf0\xff\x36\x9c\x8f\x3a\x92\xdd\x6e\x79\x20\x03\xeb\xde\x2e\x1d\xa2\x94\x45\x86\x96\x98\x02\x1b\x5d\xf5\xd0\x34\xb2\x41\xd4\x58\x59\x3e\x01\xb3\x97\x1f\x5c\x72\xfe\xec\x7c\x79\x4a\x5a\xd2\x62\xe8\xc0\xa4\xbe\x57\x79\xd4\xb8\x62\xfc\x21\x11\x32\x8b\x4f\xc6\xee\x98\xc1\x27\xc4\xf4\x41\x04\x1c\xd7\xd8\x9e\xe7\x7b\x0c\xb3\x98\x2e\x4a\x07\x71\x24\x25\xfb\xaf\x2e\x7b\x10\x6e\x3d\xb3\x45\xb2\xdd\x9e\x0e\xda\x73\x9f\x6e\x44\x61\xd9\x50\x7b\x4e\x5f\xeb\x50\x4d\xfa\x08\x37\x78\x9f\x04\xb3\xdd\xe1\x74\xfd\xd8\xe7\x91\xe0\x9b\xab\xff\x08\x82\x4f\xd4\x6c\xcf\xe7\xf4\xdf\x42\xda\xcf\x76\x68\x6e\x4b\x23\xc5\x23\x03\xb8\xc9\x79\xfa\x0a\xcc\xff\x84\x1f\x6f\x5e\x81\xf9\xe9\x27\xdb\x40\x7b\xaf\x32\xc1\x74\x6a\xb6\x3f\xcf\x99\xb9\xb1\xc9\xec\xf9\x01\xd5\xcc\xde\x7a\xa3\x7f\x63\x46\x15\x45\xff\xec\x94\x2a\x8a\x8e\xcc\xa9\xa2\xe8\xd9\x49\x55\x34\x1c\x04\xbc\x7c\x5a\x15\x45\xe1\xe1\x2f\x9a\x58\xd9\x2f\x35\xc1\xe0\xd3\x2c\xb1\xcf\xb2\xe3\xab\x20\x9d\x1f\xb3\x04\x4d\xb0\xbc\x0d\xf6\xd8\x8c\xa7\x59\x47\xc6\x59\xff\xf8\x3c\x6b\x3c\xd0\xfa\xbe\x89\xd6\x70\xa4\x15\xa5\x83\xaf\xcf\xe3\x71\xc8\xbf\x02\x00\x00\xff\xff\x66\x22\xaf\xa9\xad\x21\x00\x00")

func contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_contextTmpl,
		"context.tmpl",
	)
}

func contextTmpl() (*asset, error) {
	bytes, err := contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.tmpl": contextTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"context.tmpl": &bintree{contextTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

