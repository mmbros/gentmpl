// Code generated by go-bindata.
// sources:
// context.tmpl
// DO NOT EDIT!

package run

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\xdf\x6f\xe3\x36\xf2\x7f\x96\xfe\x8a\xa9\x12\xa0\x56\x6a\xcb\x69\xf0\xed\xf7\x21\x7b\x3e\x60\xb7\xbb\x5b\xe4\xd0\xdd\x0d\xb0\x29\xee\xc1\x30\x02\xda\xa2\x6c\xb6\x12\xa9\x92\xd4\x26\x81\xa1\xff\xfd\x30\x43\xea\xa7\xed\x34\xc1\xa1\xb8\x3c\x04\x92\x48\x0e\x67\x3e\xf3\x99\xe1\x70\xbc\xdf\x43\xca\x33\x21\x39\x44\x25\xdb\xfc\xc1\xb6\x3c\x82\xba\x0e\xf7\xfb\x19\x58\x5e\x94\x39\xb3\x1c\xa2\x1d\x67\x29\xd7\x11\x24\x6e\xa8\x37\x42\x6b\x85\x15\x4a\x9a\x63\xc3\x3b\x9e\x97\x5c\x1f\x1d\xca\x2a\xb9\x99\x95\x6c\xcb\x67\x99\xc8\x79\x6f\x8a\xc8\x20\xf9\xac\x7e\x66\x9b\x1d\xc7\x2f\xc1\x89\x55\xcd\xb7\x99\x54\x1b\x9c\xdb\x09\xe0\xb9\x39\xb5\x12\x75\xf5\x13\xff\x4a\x6e\x4f\x9e\x4c\x9f\xd1\x7e\xcd\x0c\x7f\xde\x3e\xfe\xc8\x37\x95\x3d\x3d\xa9\x60\x42\x1e\xec\x16\x86\x61\xcf\x35\x8d\x03\xea\x3a\x9c\xcf\xe1\x17\x2e\xb9\x66\x96\xa7\xb0\x7e\x82\xfd\x1e\x92\x5b\xad\xb6\x9a\x15\x9f\x59\x81\x86\xbf\x81\x8b\x8b\x0b\x78\xff\x05\x3e\x7f\xb9\x83\x0f\xef\x6f\xee\xf0\x1d\xd7\xfd\xac\x39\xae\xba\xa6\x35\x77\xa2\xe0\xc6\xb2\xa2\x4c\x3e\x2a\x5d\x30\x0b\xd1\xd5\xe5\xe5\xff\xcf\x2e\x7f\x9c\x5d\x5e\xc1\x8f\x3f\x5d\x5f\xfe\xdf\xf5\xe5\x4f\xcd\x8e\xb7\x4c\xb3\xc2\x5c\x83\x54\xf7\x04\xf6\x02\x25\x74\x4e\x9a\xe2\xc0\x56\xdd\x67\x24\xc9\x0f\xfe\xa2\xbc\x60\x1c\x67\xc6\x70\x7b\x5f\x30\xc9\xb6\x5c\x2f\x22\x9c\xf1\x16\x3f\x7d\x72\x5f\xa0\xae\xa3\x29\x20\x1a\xf7\x05\x2b\xdd\xf8\xc7\x4a\x6e\x3e\xb1\x12\x87\xc2\xd0\x73\xd3\x59\xeb\x9e\xbd\xb5\x61\x28\x8a\x52\x69\x0b\x93\x30\x88\x76\xb6\xc8\xe7\xad\x07\xc3\x20\x12\x0a\xff\x97\xcc\xee\xe6\x48\x33\x7c\x88\xc2\x78\x80\x73\x0f\xe6\x01\x9b\x91\x23\xf3\x39\xd8\xa7\x92\x43\x6f\x20\x0c\xe8\xcb\x24\x0c\x02\x82\xd1\x6f\xf6\x41\x56\xc5\x1d\x0e\xd4\x35\x2a\x59\x09\x69\x61\x92\x73\xd9\xcd\x30\x31\x89\x0c\x9c\x09\xdb\x67\x56\xe0\xa8\x9f\x1d\x93\x0e\xc7\x96\x6c\x94\x34\x96\x49\x6b\xc2\x80\x1e\x5b\x56\x99\x5f\xb9\x84\x05\xae\x19\x6e\x4f\xf2\xdc\x54\xaf\xbc\x66\x72\xcb\xe1\x5c\xa4\x8f\x53\x38\xe7\x39\x2f\xe0\x7a\xe1\x77\x87\x19\xe9\x8a\xb3\xce\xe9\x0b\xa1\xed\x26\xd5\xb5\x8b\x52\xfe\x27\xad\x85\x4b\x6f\xc1\xf9\x81\x8e\x0b\x10\xca\xb2\x0e\x6c\x92\x87\xcf\x33\x6f\x9b\x13\x24\x95\x1d\x86\xfc\x7c\x0e\x85\x4a\xab\x9c\xc3\x37\xa6\x05\x5b\xe7\xdc\x84\xc1\x37\xa6\xa1\xe8\xac\x59\xf6\xed\x5d\x5d\x34\x6f\xad\xbd\x61\x30\x08\xdd\x13\x61\xe5\xd3\x53\x5d\x87\x48\x3e\xa0\x54\x74\x85\x2c\x31\x13\x7a\x86\xe5\xca\x58\x2d\xe4\x36\x6e\x9f\x60\x7f\x80\xf8\x47\x95\xa7\x5c\xc3\x02\xa2\x3e\x25\xde\x31\xc3\xdf\x0b\xe2\xb6\xd3\x1e\xe5\x82\x13\x12\x06\xb4\x09\x02\x5e\xb0\x3f\xf8\xa4\x11\x3e\x45\xa7\xb9\xad\xe3\x38\x0c\x32\xa5\x41\x4c\x49\x2d\x9c\xea\x1c\xe6\x14\xdb\x87\x41\x60\x1e\x84\xdd\xec\xe8\x71\xc3\x0c\x6f\xd7\xc6\xb0\x58\xc0\xa5\x5b\xb7\xbc\x5c\xe1\xdb\xf7\xc9\xf7\x83\xf7\x26\x1a\x92\xaf\xbc\x64\x9a\x59\xa5\xaf\xd1\xdf\xa4\xa2\x1b\x0d\x83\x20\xe5\x19\xab\x72\x3b\x1e\xa1\x75\xff\x52\x42\x4e\x46\x08\xb8\x1d\xe2\x30\x08\xd0\xd7\x64\xe1\x52\xac\x60\x41\x96\x87\xf8\x51\x73\x5b\x69\x49\xef\x26\xac\x43\xcc\x2d\x5b\x6e\x1b\xc4\x3e\x92\x65\x6e\x8e\x01\xbb\x6b\x6c\xad\x8c\xcb\x75\xf8\x45\xce\xec\xae\x45\xde\x79\x6d\x2c\x61\x22\xe1\x44\x68\x0e\xbd\x88\x3e\xc1\x50\x98\xcf\xfd\x3e\x4e\xad\x20\x70\x6f\x0b\x58\x26\x49\xe2\xe7\xef\x51\x24\x33\x56\x5f\x19\xab\x21\x71\x9a\xd6\x35\x40\xed\x04\xb4\xc7\x91\x90\x29\x7f\x04\xab\x80\x69\xcd\x9e\x40\x65\x24\xdb\x7d\x0e\x83\xc0\x8a\x2b\x96\x89\x46\xf6\x72\x35\x8c\x7c\x12\x8b\x91\xbf\x3f\x12\xa1\x0c\xe7\x61\x84\xde\xdd\x5c\xbd\xfd\x78\xd3\x86\x28\xec\xf7\x38\x44\x8a\xd1\xa4\xba\x86\x7a\x0a\x2e\x6f\x38\x75\xce\x7b\x69\x80\x62\xf6\x20\x18\x83\x36\xd9\x6c\xb9\x25\xa0\xdb\x53\xca\xa1\x41\x82\x30\x0e\x45\xfa\x48\xbc\x75\x96\x2c\xe5\x8a\x56\xad\x2b\x91\xa7\xb4\x6e\x60\xb7\x09\x03\x04\xed\x04\xcf\x51\x54\x43\xf3\xdf\xa7\x80\x8a\xb5\x2c\xa7\x6d\x10\x06\x5c\xbf\xfc\x7d\xe5\xb9\x67\x96\x22\x7d\x5c\xf5\xb9\x84\xe3\xe1\x28\xc6\xfb\x41\x7e\x50\x68\xb8\x23\xed\x25\x5c\x6b\x21\x50\x19\xbd\xa3\x14\x47\xb9\x49\xd9\x9d\x46\xdb\x21\xc3\x1c\x05\x87\x4c\x43\x86\x69\x55\x90\x00\xe4\x46\x2b\xb8\x45\x95\xf2\xc3\x95\x6d\x88\x71\x82\xbf\x7b\xcc\x6a\x33\x68\xdd\x9d\xdc\xde\x5c\xdd\x79\x26\xd4\xc7\xbd\xd7\x57\x3d\x20\xfe\x94\x57\x76\x89\xaf\xab\x16\xc2\x83\x00\xb2\xf1\x08\xd1\xa3\x78\x76\xa5\x92\x83\xb4\x91\x31\x40\xf5\x20\x31\xbf\x0a\xcc\x66\xd1\x24\x86\xc3\x14\xdf\xc4\x30\xf2\xe6\xaf\x70\x83\x23\x7f\xcf\x41\xe9\x91\xe9\x0e\x1c\xe4\x9d\x83\x6d\xf5\x1a\x6c\xba\xf2\xf4\x7f\x86\x91\xe3\x35\x3a\x9e\x6d\x79\xe2\xe9\xd9\x54\xda\xbf\x19\xfe\x8b\x7a\x27\x64\xca\x2c\x73\x47\xe5\xfc\x02\x63\xb6\x57\xae\xe1\x71\xb1\x55\xb3\xb5\x9b\x14\x5e\xcc\x9d\x25\x95\xe1\xbd\xcf\xf0\xa9\x32\x96\x4a\x3a\x2a\xe3\x90\xe4\xb9\x62\x69\x77\x46\x86\xb6\x28\x73\xca\x1b\x8d\x8a\x9f\xf9\xc3\xa4\x3d\x4e\xf0\xb0\x74\xe7\xde\xf2\x72\x15\xc7\x5e\xbb\xae\x06\xa4\x47\x33\x19\x16\x86\x71\xe7\x06\x4c\x21\xf7\x53\x77\xc4\x0e\x4f\xca\xfe\x71\x1e\x23\x65\x50\x91\xe4\x96\x69\xc3\x27\x2e\x42\x27\xad\xee\x13\x9c\x1b\xc7\xc8\x7e\x4f\x00\x9c\xdc\xbf\x54\x9c\xc0\x47\x2a\xc9\x1d\x32\xcd\xba\xc6\x4a\x94\xed\xea\xad\xd9\xc0\x24\x97\x75\x5f\x04\xc6\x71\xdb\x9d\x09\xce\x9d\x87\x86\x26\x49\x12\xfb\x5d\x49\xf5\xd1\x76\x2f\x5e\xdb\x15\x6b\x1d\xd6\x2f\xa0\xbf\xbb\x15\x39\xa2\xa0\x35\x47\xe9\x0e\x12\x8b\xca\xd7\x50\x9d\x80\x89\x61\x78\x84\xe3\x5e\x47\x4e\xeb\xee\xb0\x7e\x47\x13\xf0\x54\x6c\x2a\x4e\xfe\xa7\x3f\x70\x69\x28\x6e\xea\xee\x9b\xab\x77\x37\x6d\x95\x3e\xbf\x00\xce\x36\x3b\x97\xb3\x77\xcc\x00\x83\x54\x64\x19\xd7\x5c\x5a\xda\x13\xc8\xdf\x4d\xa6\x20\x2d\x9a\xbc\xda\xbf\x85\x3a\x51\x46\x15\xce\x46\x03\x3b\xf6\x8d\x93\xc9\x06\xcd\x27\x49\xb3\x7f\x82\xe6\x05\x2b\x41\x72\x9e\x36\x82\xe9\x48\x10\x57\x6b\xd1\x4f\x6e\x23\x48\x06\x87\xbf\x33\xc0\xd9\x39\xd4\x0a\xa5\x34\xc9\x2b\x78\x95\x23\xdb\xcb\xab\xf3\xe5\x07\xf7\x0a\xac\x2c\x73\xc1\x11\x93\x12\x99\x94\xfa\x93\xad\x71\x2c\x1e\x71\x68\x60\xc9\x37\x22\x13\x3c\x05\x4a\x11\x6a\xfd\x3b\xdf\xd8\x29\xca\x79\xd0\xc2\xa2\x0b\x71\x96\xaa\x6c\x59\x59\x5c\xf3\xa0\x13\x1c\xbc\xc9\x80\x49\xe0\x5a\x2b\x0d\x6a\xb3\xa9\xb4\x01\xa7\x46\xb3\xa2\x3b\xdc\x74\x2b\x49\x58\xe3\x25\x4d\x9b\xd9\x4a\xa2\x34\x63\x55\x69\xa6\xb0\xae\x2c\xea\x6a\x05\xcb\x41\x73\x53\xe5\xd6\x40\xc1\x9e\x80\xe5\x9a\xb3\xf4\xc9\x79\x65\xcd\xb9\x24\x89\x96\xcb\xc6\x08\xaf\x1e\x7e\xe5\x4e\xbf\xb7\x9d\x02\x28\x61\xcd\xfd\x86\x3c\x05\xc3\x32\x9e\x3f\x81\xc0\x12\x57\xb3\x3c\xe7\x79\xf2\x97\xa4\xf6\x98\x4e\x1e\x34\x08\x95\xfc\x9b\xf6\x99\x3a\xc4\x84\xb4\x5c\x67\x6c\xc3\xf7\x75\xec\x01\xf1\x09\xac\xcd\xe7\x5d\xf6\x0f\x03\x8a\xa7\x66\xc0\xc5\x4a\x18\xe0\x05\x0b\xbf\x7f\xb7\x80\x28\xa2\x8a\xaa\x97\xda\x12\xbf\x79\x2b\xe5\x41\x4f\x69\xba\x53\x20\xee\x9f\x85\xfd\xf9\x34\xcf\xcd\x18\x90\x68\xcc\x21\xd7\xdb\x40\xee\x5c\x38\x1c\xf0\xc3\x24\xde\x37\x17\x22\xc2\x64\x00\x09\x5d\x1b\x1b\x9c\xe8\xd6\x39\x71\x35\xac\xbf\x98\x5e\xba\x00\x7d\xa0\x9a\x52\x99\xe4\xab\x4d\x55\x65\x43\xb2\x93\x6b\xdd\x9a\xdf\x57\x54\x8a\x3c\x7e\x43\xa3\xdf\x2d\xf0\x85\x50\xc8\x0a\x9b\xdc\x6a\x21\xed\x84\x6b\x4d\x86\xd6\xe1\xc5\xfc\x54\x44\x58\x55\xe4\x68\xc8\x19\x6c\xb9\x24\x07\x6c\x94\xcc\xc4\xb6\xd2\x0c\x89\xe6\xae\x68\x93\xbb\x2f\x9f\x7e\x8d\xc3\xf0\x0c\x7c\x8f\xc2\x21\x6f\x15\x1d\x96\x42\x12\x9f\xb6\x6d\xf7\x66\xa3\x52\x9e\xc0\xc4\xdf\xb2\x20\x6a\xcf\xca\xa8\x3d\x9e\xfb\xbd\x0e\xcc\xc3\xbe\x0f\x72\x4f\x72\xfd\x7d\x73\xd8\x0f\x89\xc2\x41\xce\x3f\x1b\xaf\xf0\xe3\xde\xc4\x33\x78\xaf\xe8\xfe\x4d\x45\xca\x20\xb8\x4c\x12\x9e\xc1\x5b\x90\xfc\xa1\xa3\xfb\x83\xc8\x73\xe4\xfb\xc6\x75\x92\x40\x49\xe0\xdf\xb8\x7e\x1a\x40\x8e\xeb\x7e\x33\x3c\xab\xf2\x1c\xf0\x58\x4e\xf9\xba\xda\x42\x59\xe9\x52\x19\x94\x3a\xea\xf1\xa1\x96\x4d\x5f\x09\x16\x60\x75\xc5\x47\x26\xf4\x46\x33\x96\x1b\x7e\xdc\x02\xd7\x7c\x3a\x02\x31\x3c\x08\xbb\x83\xad\x9a\xbb\x19\x2f\x56\xaf\x6d\x60\x79\x0d\xdb\x06\xd7\x49\x2d\xfb\x33\x8e\x69\xea\xea\xa3\xa6\x6c\x70\xb4\x48\xe0\x56\x19\x23\xd6\xd4\xec\xc8\x2b\x6e\xae\xc3\x33\x98\x51\x41\xd1\x52\x23\xa6\x4f\xbd\x1a\xcc\xeb\x38\x68\xa1\xa1\x12\xa3\xba\x04\x8e\x36\xda\x46\x7a\x1f\xac\x19\x33\x64\x90\xb0\xa8\xf9\x45\x5c\xa2\x8b\xd2\x01\xa7\x3d\xdd\xfa\xb4\x6e\xd6\xf7\x59\xdd\x93\xe8\x68\xbd\xe5\xf7\x5c\x56\xc5\x3d\xc9\x6f\x89\x3d\xc8\x94\x87\xcc\x1e\x2f\x1a\x6b\xfe\x95\x8a\x01\x7f\xa7\x63\x06\x4a\xcd\x33\xf1\x08\x4c\xa6\x60\xaa\x0c\x1f\xbd\xfe\xcd\x4e\x5d\x57\x0d\x59\x02\xf0\xde\xd9\x40\x3e\xc1\xbf\x6e\x4b\x2f\x6a\xe1\xcc\x8b\x0e\xc6\xbd\x7c\x52\x0a\xc7\x3e\x3c\xb2\xa2\xcc\x79\x5f\x10\x44\xae\x21\xfb\x9b\xe1\x3a\x9a\x7a\xe5\x16\x4e\xde\xd4\x2b\xb8\x88\x22\x2c\x0e\xf0\x5b\x37\x79\x0c\xe3\xad\xd3\x65\x08\x64\xa7\x60\x1f\x4a\x3f\xf5\x39\x30\xc7\x96\xf5\x20\x1d\xed\xfb\xd5\xd9\x38\xdc\xb7\x33\xbc\xbf\xaf\x9f\xfa\xdc\xbe\x7d\xc4\x86\x6e\xfc\xdc\x2b\x13\x9b\x86\x60\xeb\xd3\xcc\x55\xc4\xe8\xaf\xbb\xfe\x78\x51\x19\x8b\xa9\xca\x25\x70\x62\x2a\x93\xca\xee\xb8\x76\xb9\xda\xcb\xa3\x1a\xcc\x93\x36\x3c\x83\x09\x7f\xbc\xee\x25\xe2\xb9\x3f\xc4\xca\x64\xab\xa2\x18\xf7\xb8\x71\xed\xca\x46\xaa\xd2\xb0\xce\x99\xfc\x63\x0a\x52\x35\xaa\xb4\x59\x12\x55\x0c\x47\x37\x99\x99\x6f\x35\xde\x63\xb5\xb7\x80\xa8\x19\x18\xe3\xd2\x9f\x33\xc6\x83\x0a\xea\x54\xe8\xc6\x86\x56\x5d\xdf\x72\x69\xde\xef\xb1\xfa\xbb\xc7\x89\xcf\x74\x26\x11\xb7\x76\x3d\x81\x6a\x15\x68\x2e\x53\xcc\x50\x3e\x34\x28\x1a\x3e\x60\x31\xdc\x15\x3e\x08\x2f\xd5\x4c\x94\x0c\x30\xa4\x98\xec\x7a\x3f\xbe\x42\x17\x96\x17\xed\xda\xde\x37\xd8\x30\x89\x08\x31\x17\x0f\x33\x77\x6f\x53\x19\x30\xe7\x9c\xe6\xf6\xe8\xc3\xb3\xdd\x95\xce\x1d\xa1\x64\x42\xbe\xa6\xa9\xb4\x52\x18\x1f\x57\x9a\xe7\xcc\x8a\x6f\x6d\x05\x7a\x08\x45\x46\x9d\xca\xc4\xef\xdb\xdc\x40\x1a\x6a\xf4\x2b\x58\x21\x37\x79\x95\xb6\xe7\xf6\xa6\xd2\x54\xfa\xb7\x77\xa8\xb0\x6b\x41\xaf\xc8\x43\xbe\x5b\xe7\xca\xa7\xf3\xf6\xda\x3d\x6c\xc1\xef\xf7\x6e\x86\xeb\x8f\x2f\xfb\x5d\x45\xbf\xa4\xae\x57\x47\x32\xb0\xe9\xfc\xd2\x22\x4a\x59\x64\xe8\x89\x29\xb0\xd1\xfd\x0a\x5d\xa3\x4a\x44\x8d\xe5\xf9\x13\x30\x77\xe3\xc0\x21\xcf\x67\xcf\xe5\x29\x59\x49\x83\x7d\x02\x93\xf9\x8d\xc9\xa3\x6a\x11\xe3\x8f\x7a\xb2\xac\xc0\xe0\x19\xd1\x31\x81\x2f\x88\xe9\x83\xe8\x49\xdc\x60\x4d\x9c\x1e\x08\x4c\x42\xba\x9d\x1c\xc5\x91\x8c\xec\x7e\x98\x38\x80\x70\xdf\x08\x5b\x44\xfb\xfd\xf9\xa0\x26\x6e\xd2\x8d\xc8\x9c\x18\xaa\x89\xe9\xf7\x28\x34\x93\x7e\x66\x1a\x7c\x8f\x7a\x1d\xd1\x7a\xe0\x83\x53\xbf\x20\xf4\x7e\x55\x6c\x7e\x43\xc0\x37\xaa\x70\xe7\x73\x7a\x76\x90\x76\x7d\x10\xea\x76\x52\x23\xee\x44\xb3\x6a\x72\x19\xbf\x01\xfb\x8f\xfe\xef\x1b\x6f\xc0\xfe\xf0\x83\xab\x5a\x1b\x56\x1d\xeb\xd9\xfd\x77\x3d\x1d\xea\x63\xbf\xb6\xab\x13\x04\x7f\x6f\x5f\x27\x08\x5e\xd1\xd9\x09\x5e\xd4\xdb\x71\xbf\x4e\xf4\x3a\x7b\x76\x85\x15\xdd\x6b\x1b\x3d\xc7\x64\x8c\x9b\x3e\x27\xba\x3e\x7f\x7b\xdb\x67\xdc\xf7\x79\x5d\xe3\x67\xd8\xf9\x19\xb4\x7e\x82\x71\xd3\xe0\x3f\x01\x00\x00\xff\xff\xfd\x74\x60\x71\x40\x20\x00\x00")

func contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_contextTmpl,
		"context.tmpl",
	)
}

func contextTmpl() (*asset, error) {
	bytes, err := contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.tmpl": contextTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"context.tmpl": &bintree{contextTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

