// Code generated by go-bindata.
// sources:
// context.tmpl
// DO NOT EDIT!

package run

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x58\xdd\x6f\xdb\x38\x12\x7f\x96\xfe\x8a\x59\x23\xc0\x4a\x59\x5b\xf6\x1a\xb7\xf7\x90\x9e\x0f\x68\xb7\x4d\x91\xc3\xb5\x1b\x60\x73\xb8\x07\xc3\x08\x68\x6b\x6c\xb3\x2b\x91\x5a\x92\x6e\x12\x18\xfa\xdf\x0f\x33\xd4\xa7\x3f\xd2\x04\x87\x62\xf3\x10\x88\xe4\x70\x38\xf3\xe3\x6f\x3e\xe8\xfd\x1e\x52\x5c\x4b\x85\x30\xc8\x75\xba\xcb\x70\x00\x65\x19\xee\xf7\x23\x70\x98\x17\x99\x70\x08\x83\x2d\x8a\x14\xcd\x00\x12\xbf\xd4\x59\xe1\xad\xd2\x49\xad\xec\xa9\xe5\x2d\x66\x05\x9a\x93\x4b\xeb\x9d\x5a\x8d\x0a\xb1\xc1\xd1\x5a\x66\xd8\x11\x91\x6b\x48\x3e\xeb\x5f\xc5\x6a\x8b\x34\x13\x9c\xd9\x55\xcf\x8d\x94\x5e\x91\x6c\xab\x00\x33\x7b\x6e\x27\xd9\x5a\x09\x7e\x4b\x6f\x47\x9f\x4a\x9f\xb1\x7e\x29\x2c\x3e\xef\x1f\x3e\xe2\x6a\xe7\xce\x0b\xe5\x42\xaa\xa3\xd3\xc2\x30\xec\xdc\x4c\x7d\x01\x65\x19\x8e\xc7\xf0\x11\x15\x1a\xe1\x30\x85\xe5\x13\xec\xf7\x90\xdc\x1a\xbd\x31\x22\xff\x2c\x72\x72\xfc\x0d\x5c\x5e\x5e\xc2\xfb\xdf\xe0\xf3\x6f\x77\xf0\xe1\xfd\xcd\x1d\x8d\x69\xdf\xaf\x06\x69\xd7\x15\xef\xb9\x93\x39\x5a\x27\xf2\x22\xb9\xd6\x26\x17\x0e\x06\xd3\xc9\xe4\xef\xa3\xc9\xcf\xa3\xc9\x14\x7e\xfe\xe5\x6a\xf2\xb7\xab\xc9\x2f\xf5\x89\xb7\xc2\x88\xdc\x5e\x81\xd2\xf7\x0c\xf6\x8c\x34\xb4\x97\x34\xa4\x85\x8d\xbe\x5f\xb3\xa6\x6a\xf1\xa3\xae\x14\xd3\xba\xb0\x16\xdd\x7d\x2e\x94\xd8\xa0\x99\x0d\x48\xe2\x2d\x4d\x7d\xf2\x33\x50\x96\x83\x21\x10\x1a\xf7\xb9\x28\xfc\xfa\xf5\x4e\xad\x3e\x89\x82\x96\xc2\xb0\x10\xab\x3f\xc4\x06\xbd\xb7\xfe\xbb\xf2\x36\x0c\x65\x5e\x68\xe3\x20\x0a\x83\xc1\xd6\xe5\xd9\xb8\xb9\xc1\x30\x18\x48\x4d\xff\x0b\xe1\xb6\x63\xa2\x19\x7d\x0c\xc2\xb8\x87\x73\x07\xe6\x1e\x9b\x89\x23\xe3\x31\xb8\xa7\x02\xa1\xb3\x10\x06\x3c\x13\x85\x41\xc0\x30\x56\x87\x7d\x50\xbb\xfc\x8e\x16\xca\x92\x8c\xdc\x49\xe5\x20\xca\x50\xb5\x12\x36\x66\x95\x81\x77\x61\xf3\xcc\x0e\x5a\xad\xa4\x63\xb6\xe1\xd4\x96\x95\x56\xd6\x09\xe5\x6c\x18\xf0\x67\xc3\x2a\xfb\x6f\x54\x30\xa3\x3d\xfd\xe3\x59\x9f\x17\xad\x8c\x37\x42\x6d\x10\x2e\x64\xfa\x38\x84\x0b\xcc\x30\x87\xab\x59\x75\x3a\x8c\xd8\x56\x92\xba\xe0\x19\x46\xdb\x0b\x95\xa5\x8f\x52\xfc\x93\xf7\xc2\xa4\xf2\xe0\xe2\xc8\xc6\x19\x48\xed\x44\x0b\x36\xeb\xa3\xef\x51\xe5\x9b\x57\xa4\xb4\xeb\x87\xfc\x78\x0c\x3e\x17\xc1\x57\x61\xa4\x58\x66\x68\xc3\xe0\xab\x30\x90\xb7\xde\xcc\xbb\xfe\x2e\x2e\xeb\x51\xe3\x6f\x18\xf4\x42\xf7\x4c\x58\x55\xe9\xa9\x2c\x43\x22\x1f\x70\x2a\x9a\x12\x4b\x6c\xc4\xdf\x30\x5f\x58\x67\xa4\xda\xc4\xcd\x17\xec\x8f\x10\xbf\xd6\x59\x8a\x06\x66\x30\xe8\x52\xe2\x9d\xb0\xf8\x5e\x32\xb7\xbd\xf5\xa4\x17\xbc\x92\x30\xe0\x43\x08\xf0\x5c\xfc\x81\x51\xad\x7c\x48\x97\xe6\x8f\x8e\xe3\x30\x58\x6b\x03\x72\xc8\x66\x91\xa8\xbf\x30\x6f\xd8\x3e\x0c\x02\xfb\x20\xdd\x6a\xcb\x9f\x2b\x61\xb1\xd9\x1b\xc3\x6c\x06\x13\xbf\x6f\x3e\x59\xd0\xe8\xc7\xe4\xc7\xde\xb8\x8e\x86\xe4\x77\x2c\x84\x11\x4e\x9b\x2b\xba\x6f\x36\xd1\xaf\x86\x41\x90\xe2\x5a\xec\x32\x77\xb8\xc2\xfb\xfe\xa5\xa5\x8a\x0e\x10\xf0\x27\xc4\x61\x10\xd0\x5d\xb3\x87\x73\xb9\x80\x19\x7b\x1e\xd2\xa4\x41\xb7\x33\x8a\xc7\x36\x2c\x43\xca\x2d\x1b\x74\x35\x62\xd7\xec\x99\x97\xb1\xe0\xb6\xb5\xaf\x3b\xeb\x73\x1d\xcd\xa8\x91\xdb\x36\xc8\xfb\x5b\x3b\xd4\x10\x29\x38\x13\x9a\xa7\x6e\x91\x82\x61\x3c\xae\x4e\xf2\x86\x05\x81\x1f\xcd\x60\x9e\x24\x49\xb5\x63\x4f\x4a\x85\x75\x66\x6a\x9d\x81\xc4\xdb\x5a\x96\x00\xa5\x57\xd0\x14\x24\xa9\x52\x7c\x04\xa7\x41\x18\x23\x9e\x40\xaf\x59\xb7\x9f\x0e\x83\xc0\xc9\xa9\x58\xcb\x5a\xf7\x7c\xd1\x8f\x7d\x56\x4b\xb1\xbf\x3f\x11\xa3\x82\xe4\x28\x46\xef\x6e\xa6\x6f\xaf\x6f\x9a\x20\x85\xfd\x9e\x96\xd8\x30\x16\x2a\x4b\x28\x87\xe0\x33\x87\x37\xe7\xa2\x93\x08\x38\x6a\x8f\xc2\x31\x68\xd2\xcd\x06\x1d\x43\xdd\xd4\x29\x8f\x06\x2b\xa2\x48\x94\xe9\x23\x33\xd7\x7b\x32\x57\x0b\xde\xb5\xdc\xc9\x2c\xe5\x7d\x3d\xbf\x6d\x18\x10\x68\x67\x98\x4e\xaa\x6a\xa2\x7f\x19\x02\x19\xd6\xf0\x9c\x8f\x21\x18\x68\xff\xfc\xcb\xa2\x62\x9f\x9d\xcb\xf4\x71\xd1\x65\x13\xad\x87\x07\x51\xde\x0d\xf3\xa3\x56\xc3\x17\xb5\x97\xb0\xad\x81\x40\xaf\x79\x4c\x5a\x3c\xe9\xa2\xa2\xad\x47\x9b\x3e\xc7\x3c\x09\xfb\x5c\x23\x86\x19\x9d\xb3\x02\xe2\x46\xa3\xb8\x41\x95\x33\xc4\xd4\xd5\xc4\x38\xc3\xe0\x3d\xe5\xb5\x11\x34\xd7\x9d\xdc\xde\x4c\xef\x2a\x26\x94\xa7\x6f\xaf\x6b\x7a\xc0\xfc\x29\xa6\x6e\x4e\xc3\x45\x03\xe1\x51\x08\xb9\xf8\x00\xd1\x93\x78\xb6\xcd\x92\x87\xb4\xd6\xd1\x43\xf5\x28\x35\xbf\x0a\xcc\x7a\x53\x14\xc3\x71\x92\x27\x64\x09\x37\xe2\xcd\xb7\x70\x83\x13\x7f\xcf\x41\x59\x21\xd3\x96\x1c\xe2\x9d\x87\x6d\xf1\x1a\x6c\xda\x06\xf5\x2f\xc3\xc8\xf3\x9a\x2e\x5e\x6c\x30\xa9\xe8\x59\xf7\xda\xff\xb1\xf8\x51\xbf\x93\x2a\x15\x4e\xf8\x62\x39\xbe\xa4\x98\xed\x34\x6c\x54\x30\x36\x7a\xb4\xf4\x42\xe1\xe5\xd8\x7b\xb2\xb3\xd8\x99\x86\x4f\x3b\xeb\xb8\xa9\xe3\x46\x8e\x48\x9e\x69\x91\xb6\x55\x32\x74\x79\x91\x71\xde\xa8\x4d\xfc\x8c\x0f\x51\x53\x50\xa8\x5c\xfa\xca\x37\x9f\x2c\xe2\xb8\xb2\xae\xed\x02\xf9\xd3\x46\xfd\xd6\x30\x6e\xaf\x81\x52\xc8\xfd\xd0\x17\xd9\x7e\xad\xec\x16\xf4\x98\x28\x43\x86\x24\xb7\xc2\x58\x8c\x7c\x84\x46\x8d\xed\x11\xc9\xc6\x31\xb1\xbf\x22\x00\x09\x77\x9f\x15\x67\xf0\x51\x5a\xa1\x47\xa6\xde\x57\x7b\x49\xba\x7d\xc7\x35\xea\xb9\xe4\xb3\xee\x8b\xc0\x38\xed\xbb\x77\xc1\x5f\xe7\xb1\xa3\x49\x92\xc4\xd5\xa9\x6c\xfa\xc1\x71\x2f\xde\xdb\xb6\x6b\x07\xaf\xa1\xe7\xe9\x4f\xef\xa2\x91\xce\xd2\x9a\xf6\xe4\xd1\x49\xca\x83\xa2\xd6\xf2\x35\x74\x67\x70\x62\x68\x92\x2b\x09\xdd\x28\x85\x86\xb0\x21\x69\x3e\xab\x2c\x5f\x12\xa5\xfe\xf9\xf6\xdd\x4d\xac\x7a\x0d\x3a\xed\x44\x5b\xd1\x76\x15\xef\x58\x80\xca\x77\xdd\x1c\xe3\x9f\x55\x67\xc0\x4b\x71\xfd\x44\xb8\x99\xbe\xbb\x69\x1e\x14\xe3\x4b\x40\xb1\xda\xfa\xe2\xb2\x15\x16\x04\xa4\x72\xbd\x46\x83\xca\x9f\x09\x4c\xcc\x3a\xa5\xb1\x15\x75\x01\xe8\x3e\x98\xbd\x2a\xab\x73\xef\xa5\x85\xad\xf8\x8a\xec\xb4\x25\x00\x58\xd3\xe8\x9f\x60\x30\x17\x05\x28\xc4\xb4\x56\xec\xbd\x2b\xe4\x74\x29\xbb\x79\xf8\x00\x96\x5e\x9f\xe2\x5d\xf0\x9e\xf6\xed\x22\x2d\x75\x9e\xed\x34\xf1\x2f\xb8\xcc\xe6\xa5\xed\xef\xf3\x83\x1f\x82\x28\x8a\x4c\x22\xa1\x52\x10\xe9\xd3\xaa\x08\xd7\x97\x4b\xd5\x98\x5c\x2c\x70\x25\xd7\x12\x53\xe0\x6c\xa6\x97\x5f\x70\xe5\x86\xa4\xe7\xc1\x48\x47\xd7\x48\x52\x7a\xe7\x8a\x9d\xa3\x3d\x0f\x26\xa1\xc5\x9b\x35\x08\x05\x68\x8c\x36\xa0\x57\xab\x9d\xb1\xe0\xcd\xa8\x77\xb4\x75\xd8\x34\x9a\xa4\xb3\x95\xa6\x61\x2d\xad\x15\x69\xb3\x4e\x17\x76\x08\xcb\x9d\x23\x5b\x9d\x14\x19\x18\xb4\xbb\xcc\x59\xc8\xc5\x13\x88\xcc\xa0\x48\x9f\xfc\xbd\x2c\x11\x15\x6b\x74\xa8\x6a\x27\x2a\xf3\x68\x16\xbd\x7d\x6f\x5b\x03\x48\xc3\x12\xab\x03\x31\x05\x2b\xd6\x98\x3d\x81\xa4\x7e\xdc\x88\x2c\xc3\x2c\xf9\x26\xb1\x2b\x4c\xa3\x07\x03\x52\x27\xff\xe5\x73\x86\x1e\x31\xa9\x1c\x9a\xb5\x58\xe1\xbe\x8c\x2b\x40\xaa\x5c\xdb\x94\x9e\xb6\x50\x85\x01\xc7\x54\xbd\xe0\xe3\x25\x0c\xe8\x35\x48\xf3\x3f\xcc\x60\x30\xe0\xe6\xaf\x93\x85\x93\xea\xf0\x46\xcb\x83\x19\xb2\xb8\x37\x20\xee\x96\xed\xae\x3c\xcb\x79\x89\x1e\x89\x0e\x39\xe4\x7f\x88\x21\xee\x5c\x7a\x1c\x68\x22\x8a\xf7\xf5\xeb\x8d\x31\xe9\x41\xc2\x6f\xdc\x1a\x27\x7e\x22\x47\xbe\xdd\xae\x5e\xd1\x13\x1f\xa2\x0f\xdc\xfe\x6a\x9b\xfc\xee\x52\xbd\x73\x21\xfb\x89\xc6\x34\xee\x77\x0d\x55\x32\x8b\xdf\xf0\xea\x0f\x33\x1a\x30\x0a\xeb\xdc\x25\xb7\x46\x2a\x17\xa1\x31\xec\x68\x19\x5e\x8e\x9f\x8d\x08\xff\x5b\x57\xfd\xb2\xa5\x11\xbb\x32\x1e\xf3\xb7\x0f\xe6\xb6\x36\x73\x07\xce\xcd\xe1\x99\x06\x2a\x9a\xc4\x6f\xc0\xc1\x3f\x7a\xbf\x33\xbc\x01\xf7\xd3\x4f\xde\xc0\xba\xc5\x38\xd5\x49\xfe\x7f\x9d\x06\xbf\xae\x5e\xdb\x6b\x04\xc1\xf7\xed\x36\x82\xe0\x15\xfd\x46\xf0\xa2\x8e\xc3\xbf\x9a\x3b\xfd\xa6\xa3\x27\xcf\xab\xdb\x8f\x53\x3a\x0e\x5b\x91\x33\xbd\xc8\x77\x6f\x46\x0e\xbb\x91\xd7\xb5\x23\xfd\x7e\x24\xe8\xfe\x8c\x17\x1c\xd4\x87\xff\x05\x00\x00\xff\xff\xfb\x95\xed\x52\xd6\x16\x00\x00")

func contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_contextTmpl,
		"context.tmpl",
	)
}

func contextTmpl() (*asset, error) {
	bytes, err := contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.tmpl": contextTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"context.tmpl": &bintree{contextTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

