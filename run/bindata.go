// Code generated by go-bindata.
// sources:
// context.tmpl
// DO NOT EDIT!

package run

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\xdf\x6f\xe3\x36\xf2\x7f\x96\xfe\x8a\xa9\x12\xa0\x56\x6a\xcb\x69\xf0\xed\xf7\x21\x7b\x3e\x60\xb7\xbb\x5b\xe4\xd0\xdd\x0d\xb0\x29\xee\x21\x30\x02\xc6\xa2\x6c\xb6\x12\xa9\x92\xd4\x26\x81\xe1\xff\xfd\x30\x43\x52\xbf\x6c\xa7\x09\x0e\xc5\xe5\x21\x90\xc4\xe1\x70\xe6\x33\x3f\x39\xde\x6e\x21\xe7\x85\x90\x1c\x92\x9a\xad\xfe\x60\x6b\x9e\xc0\x6e\x17\x6f\xb7\x33\xb0\xbc\xaa\x4b\x66\x39\x24\x1b\xce\x72\xae\x13\xc8\xdc\x52\x6f\x85\xf6\x0a\x2b\x94\x34\x87\x96\x37\xbc\xac\xb9\x3e\xb8\x54\x34\x72\x35\xab\xd9\x9a\xcf\x0a\x51\xf2\x1e\x89\x28\x20\xfb\xac\x7e\x66\xab\x0d\xc7\x2f\xd1\x91\x5d\xe1\xdb\x4c\xaa\x15\xd2\x76\x0c\x78\x69\x8e\xed\x44\x59\x3d\xe1\x5f\xf1\xed\xf1\x93\xf9\x33\xd2\xdf\x33\xc3\x9f\xd7\x8f\x3f\xf2\x55\x63\x8f\x13\x55\x4c\xc8\xbd\xd3\xe2\x38\xee\x99\x26\x18\x60\xb7\x8b\xe7\x73\xf8\x85\x4b\xae\x99\xe5\x39\xdc\x3f\xc1\x76\x0b\xd9\xb5\x56\x6b\xcd\xaa\xcf\xac\x42\xc5\xdf\xc0\xd9\xd9\x19\xbc\xff\x02\x9f\xbf\xdc\xc0\x87\xf7\x57\x37\xf8\x8e\xfb\x7e\xd6\x1c\x77\x5d\xd2\x9e\x1b\x51\x71\x63\x59\x55\x67\x1f\x95\xae\x98\x85\xe4\xe2\xfc\xfc\xff\x67\xe7\x3f\xce\xce\x2f\xe0\xc7\x9f\x2e\xcf\xff\xef\xf2\xfc\xa7\x70\xe2\x35\xd3\xac\x32\x97\x20\xd5\x1d\x81\xbd\x40\x0e\x9d\x91\xa6\xb8\xb0\x56\x77\x05\x71\xf2\x8b\xbf\x28\xcf\x18\xd7\x99\x31\xdc\xde\x55\x4c\xb2\x35\xd7\x8b\x04\x29\xde\xe2\xa7\x4f\xee\x0b\xec\x76\xc9\x14\x10\x8d\xbb\x8a\xd5\x6e\xfd\x63\x23\x57\x9f\x58\x8d\x4b\x71\xec\x7d\xd3\x69\xeb\x9e\xbd\xb6\x71\x2c\xaa\x5a\x69\x0b\x93\x38\x4a\x36\xb6\x2a\xe7\xad\x05\xe3\x28\x11\x0a\xff\xd7\xcc\x6e\xe6\xe8\x66\xf8\x90\xc4\xe9\x00\xe7\x1e\xcc\x03\x6f\x46\x1f\x99\xcf\xc1\x3e\xd5\x1c\x7a\x0b\x71\x44\x5f\x26\x71\x14\x11\x8c\xfe\xb0\x0f\xb2\xa9\x6e\x70\x61\xb7\x43\x21\x1b\x21\x2d\x4c\x4a\x2e\x3b\x0a\x93\x12\xcb\xc8\xa9\xb0\x7e\x66\x07\xae\x7a\xea\x94\x64\x38\xb4\x65\xa5\xa4\xb1\x4c\x5a\x13\x47\xf4\xd8\x7a\x95\xf9\x95\x4b\x58\xe0\x9e\xe1\xf1\xc4\xcf\x91\x7a\xe1\x35\x93\x6b\x0e\xa7\x22\x7f\x9c\xc2\x29\x2f\x79\x05\x97\x0b\x7f\x3a\xcc\x48\x56\xa4\x3a\xa5\x2f\x84\xb6\x23\xda\xed\x5c\x94\xf2\x3f\x69\x2f\x9c\x7b\x0d\x4e\xf7\x64\x5c\x80\x50\x96\x75\x60\x13\x3f\x7c\x9e\x79\xdd\x1c\x23\xa9\xec\x30\xe4\xe7\x73\xa8\x54\xde\x94\x1c\xbe\x31\x2d\xd8\x7d\xc9\x4d\x1c\x7d\x63\x1a\xaa\x4e\x9b\xdb\xbe\xbe\xcb\xb3\xf0\xd6\xea\x1b\x47\x83\xd0\x3d\x12\x56\x3e\x3d\xb5\x99\x87\x44\xf9\xcd\xf0\x5f\xd4\x3b\x21\x73\x66\x19\x89\x8a\x8e\x09\x94\xa6\x2e\xd0\x83\xcc\x84\x9e\xe1\x76\x69\xac\x16\x72\x9d\xb6\x4f\xb0\xdd\xb3\xc6\x47\x55\xe6\x5c\xc3\x02\x92\xbe\xbb\xbc\x63\x86\xbf\x17\xe4\xf7\x4e\x33\xe4\x0b\x8e\x49\x1c\xd1\x21\x68\x8c\x8a\xfd\xc1\x27\x81\xf9\x14\x0d\xea\x8e\x4e\xd3\x38\x2a\x94\x06\x31\x25\xb1\x90\xd4\x19\xd3\x09\xb6\x8d\xa3\xc8\x3c\x08\xbb\xda\xd0\xe3\x8a\x19\xde\xee\x4d\x61\xb1\x80\x73\xb7\xef\xf6\x7c\x89\x6f\xdf\x67\xdf\x0f\xde\x43\xa4\x64\x5f\x79\xcd\x34\xb3\x4a\x5f\xa2\x2f\x90\x88\x6e\x35\x8e\xa2\x9c\x17\xac\x29\xed\x78\x85\xf6\xfd\x4b\x09\x39\x19\x21\xe0\x4e\x48\xe3\x28\x42\x3f\x20\x0d\x6f\xc5\x12\x16\xa4\x79\x8c\x1f\x35\xb7\x8d\x96\xf4\x6e\x62\x57\x82\x82\xd5\xe6\x73\x58\x73\x1b\xc0\xfb\x48\x4a\x3a\x72\x03\x76\x13\xd4\x6e\x8c\x4b\x89\xf8\x45\xce\xec\xa6\x35\x82\x33\xe0\x98\xc3\x44\xc2\x91\x08\x1e\x1a\x14\xcd\x83\x11\x33\x9f\xfb\x73\x9c\x84\x51\xe4\xde\x16\x70\x9b\x65\x99\xa7\xdf\x22\x4b\x66\xac\xbe\x30\x56\x43\xe6\x24\xdd\xed\x00\x76\x8e\x41\x5b\xb5\x84\xcc\xf9\x23\x58\x05\x4c\x6b\xf6\x04\xaa\x20\xde\xee\x73\x1c\x45\x56\x5c\xb0\x42\x04\xde\xb7\xcb\x61\x82\x20\xb6\x98\x20\xb6\x07\x02\x99\x21\x1d\x06\xf2\xcd\xd5\xc5\xdb\x8f\x57\x6d\x24\xc3\x76\x8b\x4b\x24\x18\x11\xed\x76\xb0\x9b\x82\x4b\x2f\x4e\x9c\xd3\x5e\xb6\xa0\xd0\xde\x8b\xd9\xa8\xcd\x49\x6b\x6e\x09\xe8\xb6\x98\x39\x34\x88\x11\x86\xab\xc8\x1f\xc9\x85\x9d\x26\xb7\x72\x49\xbb\xee\x1b\x51\xe6\xb4\x6f\xa0\xb7\x89\x23\x04\xed\x88\xcb\x23\xab\xe0\xf1\xbf\x4f\x01\x05\x6b\x1d\x9e\x8e\x41\x18\x70\xff\xed\xef\x4b\xef\x86\xe6\x56\xe4\x8f\xcb\xbe\x5b\xe1\x7a\x3c\x4a\x05\xfd\x5c\xb0\xd7\x8f\xb8\xca\xf7\x12\x5f\x6b\x21\x50\x05\xbd\x23\x17\xe7\x72\x93\xba\x2b\x5a\xeb\xa1\x87\x39\x17\x1c\x7a\x1a\x7a\x98\x56\x15\x31\x40\xdf\x68\x19\xb7\xa8\x52\xaa\xb8\xb0\xc1\x31\x8e\xf8\xef\x16\x93\xdf\x0c\x5a\x73\x67\xd7\x57\x17\x37\xde\x13\x76\x87\xad\xd7\x17\x3d\x22\xff\xa9\x2f\xec\x2d\xbe\x2e\x5b\x08\xf7\x02\xc8\xa6\x23\x44\x0f\xe2\xd9\x75\x54\x0e\xd2\xc0\x63\x80\xea\x5e\xfe\x7e\x15\x98\x61\xd3\x24\x85\xfd\x4a\x10\x62\x18\xfd\xe6\xaf\x70\x83\x03\x7f\xcf\x41\xe9\x91\xe9\xea\x12\xfa\x9d\x83\x6d\xf9\x1a\x6c\xba\x2e\xf6\x7f\x86\x91\xf3\x6b\x34\x3c\x5b\xf3\xcc\xbb\x67\x68\xc8\x07\x25\x91\xaa\xe5\xfc\x0c\x63\xb6\xd7\xd5\x61\xe5\x58\xab\xd9\xbd\x23\x8a\xcf\xe6\x4e\x93\xc6\xf0\xde\x67\xf8\xd4\x18\x4b\x9d\x1f\x75\x7b\xe8\xe4\xa5\x62\x79\x57\x2e\x63\x5b\xd5\x25\xe5\x8d\x20\xe2\x67\xfe\x30\x69\x2b\x0b\xd6\x4d\x57\x02\x6f\xcf\x97\x69\xea\xa5\xeb\x5a\x45\x7a\x34\x93\x61\xff\x98\x0e\x3a\x81\x43\xea\x60\x66\xb9\x9b\xba\x22\xbc\x57\x4b\x7b\x57\x8a\xe3\x74\xfd\xc6\x20\xf5\x9b\x7c\xd3\x83\x1a\x65\xd7\x4c\x1b\x3e\x71\xa1\x3e\x69\x41\x98\xe0\xae\x34\xc5\x30\xf2\x9e\x84\xc4\xfd\x13\x8f\x00\x2d\x95\xe4\x0e\xe2\xb0\x2f\xc0\x85\xbc\x5d\x7f\x37\x1b\x60\xe3\xd2\xf7\x8b\x50\x3d\x0c\xa2\x53\xc1\xf9\xc5\xbe\xca\x59\x96\xa5\xfe\x54\x12\x7d\x74\xdc\x8b\xf7\x76\xcd\x61\x87\xe0\x0b\xe2\xc8\xdd\xc2\x9c\xc7\xa1\x36\x07\xe3\x06\x24\x36\xb1\xaf\x89\x19\x02\x26\x85\x61\x2f\x80\x67\x1d\x28\xfb\x5d\xd5\x7f\x47\x04\x58\x5e\x43\x87\xcb\xff\xf4\x95\x9b\x96\xd2\xd0\xe7\x5f\x5d\xbc\xbb\x6a\x6f\x05\xf3\x33\xe0\x6c\xb5\x71\xc9\x7f\xc3\x0c\x30\xc8\x45\x51\x70\xcd\xa5\xa5\x33\x81\xec\x1d\x52\x0e\x49\x11\x12\x74\xff\xd6\xeb\x58\x19\x55\x39\x1d\x0d\x6c\xd8\x37\x4e\x2a\x1b\x54\x9f\x38\xcd\xfe\x09\x9a\x57\xac\x06\xc9\x79\x1e\x18\x53\x6d\x11\x17\xf7\xa2\x9f\x25\x47\x90\x0c\xba\x08\xa7\x80\xd3\x73\x28\x15\x72\x09\x59\x30\x7a\x95\x21\xdb\xcb\xb2\xb3\xe5\x07\xf7\x0a\xac\xae\x4b\xc1\x11\x93\x1a\x3d\x29\xf7\x25\x32\x18\x16\x6b\x25\x2a\x58\xf3\x95\x28\x04\xcf\x81\x02\x5b\xdd\xff\xce\x57\x76\x8a\x7c\x1e\xb4\xb0\x68\x42\xa4\x52\x8d\xad\x1b\x8b\x7b\x1e\x74\x86\x8b\x57\x05\x30\x09\x5c\x6b\xa5\x41\xad\x56\x8d\x36\xe0\xc4\x08\x3b\xba\x2a\xa9\x5b\x4e\xc2\x1a\xcf\x69\x1a\xa8\x95\x44\x6e\xc6\xaa\xda\x4c\xe1\xbe\xb1\x28\xab\x15\xac\x04\xcd\x4d\x53\x5a\x03\x15\x7b\x02\x56\x6a\xce\xf2\x27\x67\x95\x7b\xce\x25\x71\xb4\x5c\x06\x25\xbc\x78\xf8\x95\x3b\xf9\xde\x76\x02\x20\x87\x7b\xee\x0f\xe4\x39\x18\x56\xf0\xf2\x09\x04\xb6\xcd\x9a\x95\x25\x2f\xb3\xbf\x74\x6a\x8f\xe9\xe4\x41\x83\x50\xd9\xbf\xe9\x9c\xa9\x43\x4c\x48\xcb\x75\xc1\x56\x7c\xbb\x4b\x3d\x20\x5b\x97\xc0\xda\xc2\xd0\x95\x91\x38\xa2\x78\x0a\x0b\x2e\x56\xe2\x08\x6f\x51\xf8\xfd\xbb\x05\x24\x09\xb5\x66\xbd\xd4\x96\xf9\xc3\x5b\x2e\x0f\x7a\x4a\xe4\x4e\x80\xb4\x5f\x54\xfb\xf4\x44\xe7\x28\x06\x4e\x34\xf6\x21\x37\x4b\x41\xdf\x39\x73\x38\xe0\x87\x49\xba\x0d\x97\x2c\xc2\x64\x00\x09\x5d\x53\x03\x4e\x74\xcb\x9d\xb8\x66\xd8\x5f\x84\xcf\x5d\x80\x3e\x50\x73\xaa\x4c\xf6\xd5\xe6\xaa\xb1\x31\xe9\xc9\xb5\x6e\xd5\xef\x0b\x2a\x45\x99\xbe\xa1\xd5\xef\x16\xf8\x42\x28\x14\x95\xcd\xae\xb5\x90\x76\xc2\xb5\x26\x45\x77\xf1\xd9\xfc\x58\x44\x58\x55\x95\xa8\xc8\x09\xac\xb9\x24\x03\xac\x94\x2c\xc4\xba\xd1\x0c\x1d\xcd\x5d\xfb\x26\x37\x5f\x3e\xfd\x9a\xc6\xf1\x09\xf8\x99\x88\x43\xde\x2a\xaa\xba\x42\x92\x3f\xad\xdb\x69\xd1\x4a\xe5\x3c\x83\x89\xbf\xb9\x41\xd2\x16\xdd\xa4\xad\xf3\xfd\xd9\x0a\xe6\x61\x3f\x77\xb9\x23\xbe\xfe\x0e\x3b\x9c\xbf\x24\xf1\x20\xe7\x9f\x8c\x77\x24\x83\x8b\xdc\x09\xbc\x57\x74\xc9\xa6\x6e\x67\x10\x5c\x26\x8b\x4f\xe0\x2d\x48\xfe\xd0\xb9\xfb\x83\x28\x4b\xf4\xf7\x95\x9b\x5c\x81\x92\xc0\xbf\x71\xfd\x34\x80\x1c\xf7\xfd\x66\x78\xd1\x94\x25\x60\x81\xce\xf9\x7d\xb3\x86\xba\xd1\xb5\x32\xc8\x75\x34\x53\x44\x29\xc3\x1c\x0b\x16\x60\x75\xc3\x47\x2a\xf4\x56\x0b\x56\x1a\x7e\x58\x03\x37\xec\x3a\x00\x31\x3c\x08\xbb\x81\xb5\x9a\x3b\x8a\x17\x8b\xd7\x0e\xcc\xbc\x84\xed\x40\xed\xa8\x94\x7d\x8a\x43\x92\xba\x46\x2b\xb4\x0d\xce\x2d\x32\xb8\x56\xc6\x88\x7b\x1a\xae\x94\x0d\x37\x97\xf1\x09\xcc\xa8\xa1\x68\x5d\x23\xa5\x4f\xbd\x66\xce\xcb\x38\x18\xd9\xa1\x10\xa3\xbe\x04\x0e\x0e\xf6\x46\x72\xef\xed\x19\x7b\xc8\x20\x61\xd1\xb0\x8d\x7c\x89\x6e\x5c\x7b\x3e\xed\xdd\xad\xef\xd6\x61\x7f\xdf\xab\x7b\x1c\x9d\x5b\xaf\xf9\x1d\x97\x4d\x75\x47\xfc\x5b\xc7\x1e\x64\xca\x7d\xcf\x1e\x6f\x1a\x4b\xfe\x95\x9a\x01\x7f\x39\x64\x06\x6a\xcd\x0b\xf1\x08\x4c\xe6\x60\x9a\x02\x1f\xbd\xfc\xe1\xa4\x6e\x8a\x87\x5e\x02\xf0\xde\xe9\x40\x36\xc1\xbf\xee\x48\xcf\x6a\xe1\xd4\x4b\xf6\xd6\x3d\x7f\x12\x0a\xd7\x3e\x3c\xb2\xaa\x2e\x79\x9f\x11\x24\x6e\x00\xfc\x9b\xe1\x3a\x99\x7a\xe1\x16\x8e\xdf\xd4\x0b\xb8\x48\x12\x6c\x0e\xf0\x5b\x47\x3c\x86\xf1\xda\xc9\x32\x04\xb2\x13\xb0\x0f\xa5\x27\x7d\x0e\xcc\xb1\x66\x3d\x48\x47\xe7\x7e\x75\x3a\x0e\xcf\xed\x14\xef\x9f\xeb\x49\x9f\x3b\xb7\x8f\xd8\xd0\x8c\x9f\x7b\x6d\x62\x18\x40\xb6\x36\x2d\x5c\x47\x8c\xf6\xba\xe9\xaf\x57\x8d\xb1\x98\xaa\x5c\x02\x27\x4f\x65\x52\xd9\x0d\xd7\x2e\x57\x7b\x7e\xd4\x83\x79\xa7\x8d\x4f\x60\xc2\x1f\x2f\x7b\x89\x78\xee\x8b\x58\x9d\xad\x55\x92\xe2\x19\x57\x6e\x26\x19\xb8\x2a\x0d\xf7\x25\x93\x7f\x4c\x41\xaa\x20\x4a\x9b\x25\x51\xc4\x78\x74\x25\x0a\xe3\xcb\x3b\xec\xf6\x16\x90\x84\x85\x31\x2e\x7d\x9a\x31\x1e\xd4\x50\xe7\x42\x07\x1d\x5a\x71\xfd\xec\x26\xbc\xdf\x61\xf7\x77\x87\x84\xcf\x4c\x3b\x11\xb7\x76\x3f\x81\x6a\x15\x68\x2e\x73\xcc\x50\x3e\x34\x28\x1a\x3e\x60\x33\xdc\x35\x3e\x08\x2f\xf5\x4c\x94\x0c\x30\xa4\x98\xec\x86\x48\xbe\x43\x17\x96\x57\xed\xde\xde\x37\x58\x31\x89\x08\x31\x17\x0f\x33\x77\x83\x53\x05\x30\x67\x9c\x70\x0d\xf5\xe1\xd9\x9e\x4a\x75\x47\x28\x99\x91\xad\x89\x94\x76\x0a\xe3\xe3\x4a\xf3\x92\x59\xf1\xad\xed\x40\xf7\xa1\x28\x68\xfa\x99\xf9\x73\xc3\x0d\x24\xb8\x46\xbf\x83\x15\x72\x55\x36\x79\x5b\xb7\x57\x8d\xa6\xd6\xbf\xbd\x43\xc5\xdd\xc8\x7b\x49\x16\xf2\x63\x3f\xd7\x3e\x9d\xb6\xf7\xf7\xe1\xc8\x7f\xbb\x75\x14\x6e\x1e\x7f\xdb\x1f\x4f\xfa\x2d\xbb\xdd\xf2\x40\x06\x36\x9d\x5d\x5a\x44\x29\x8b\x0c\x2d\x31\x05\x36\xba\x5f\xa1\x69\x54\x8d\xa8\xb1\xb2\x7c\x02\xe6\x6e\x1c\xb8\xe4\xfd\xd9\xfb\xf2\x94\xb4\xa4\xc5\xbe\x03\x93\xfa\x41\xe5\x51\xb7\x88\xf1\x47\xc3\x5d\x56\x61\xf0\x8c\xdc\x31\x83\x2f\x88\xe9\x83\xe8\x71\x5c\x61\x4f\x9c\xef\x31\xcc\x62\xba\x9d\x1c\xc4\x91\x94\xec\x7e\x08\xd9\x83\x70\x1b\x98\x2d\x92\xed\xf6\x74\xd0\x13\x87\x74\x23\x0a\xc7\x86\x7a\x62\xfa\xfd\x0b\xd5\xa4\x9f\xb5\x06\xdf\x93\xde\x68\x75\x38\xf0\x3e\xf6\x8b\x45\xef\x57\xcc\xf0\xbb\x04\xbe\x51\x87\x3b\x9f\xd3\xb3\x83\xb4\x1b\xa8\xd0\xd8\x94\x26\x7a\x47\xa6\x5e\x93\xf3\xf4\x0d\xd8\x7f\xf4\x7f\x4f\x79\x03\xf6\x87\x1f\x5c\xd7\x1a\xbc\xea\xd0\xf0\xef\xbf\x1b\x0e\xd1\x40\xfc\xb5\xe3\xa1\x28\xfa\x7b\x07\x44\x51\x74\x44\xa9\x28\x7a\x76\x48\x14\x0d\xef\xe0\x2f\x1f\x14\x45\x51\xff\xf0\x17\x0d\x8b\xdc\x4f\x28\xbd\x99\xa3\x5d\x62\x8b\xf8\xda\xc9\xd1\x21\x1e\xe3\x29\xd2\x91\x31\xd2\xdf\x3e\x47\x1a\x0f\x92\x5e\x37\x49\x1a\x8e\x92\x06\xb3\xa4\x68\x3c\x85\xf8\x4f\x00\x00\x00\xff\xff\xe7\x3f\xae\xbb\x01\x21\x00\x00")

func contextTmplBytes() ([]byte, error) {
	return bindataRead(
		_contextTmpl,
		"context.tmpl",
	)
}

func contextTmpl() (*asset, error) {
	bytes, err := contextTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.tmpl": contextTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"context.tmpl": &bintree{contextTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

